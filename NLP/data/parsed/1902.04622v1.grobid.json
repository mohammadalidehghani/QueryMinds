{
  "title": "LEARNING THEORY AND SUPPORT VECTOR MACHINES A PRIMER",
  "abstract": "The main goal of statistical learning theory is to provide a fundamental framework for the problem of decision making and model construction based on sets of data. Here, we present a brief introduction to the fundamentals of statistical learning theory, in particular the difference between empirical and structural risk minimization, including one of its most prominent implementations, i.e. the Support Vector Machine.",
  "introduction": "Introduction to Statistical Learning Theory The main goal of statistical learning theory [4] , [2] is to provide a fundamental framework for the problem of decision making and model construction based on sets of data. Assumptions can be made of the statistical nature about the underlying phenomena. One of the original problems in applying statistical learning theory is that of binary pattern recognition. Here, given two classes of entities, one has to assign a novel unclassified object to either of the two classes. This problem can be formalized as follow: Suppose we are given m observations, where each observation i consists of the data x i ∈ R n , i = 1, ..., m, as well as a \"ground truth\" labeling y i ∈ {-1, 1}. Then, given the data (x 1 , y 1 ), ..., (x m , y m ) ∈ X × {-1, 1} we want to estimate a decision function f → X × {-1, 1} that is able to generalize, i.e. avoid model overfitting, to unseen data points, i.e. minimizing the expected risk: R(α) = 1 2 | y -f (x, α) | dP (x, y) (2) It is assumed that some unknown probability distribution P (y, x), from which the data is, independently drawn and identically distributed (iid), drawn, does exists. Therefore, if p(y, x) exists, dP (y, x) may be written as p(x, y)dxdy, in order to state the true error rate. Statistical learning theory proves the necessity to restrict the set of functions from which f can be selected with respect to the capacity suitable for the number of available training data, and it provides some upper bound on the test error, depending on the capacity of the function class as well as the empirical risk. Subsequently, minimizing this bound provides the basis for structural risk minimization [2] . The empirical risk R emp (α) is defined as the measured mean error rate on the training data: R emp (α) = 1 2m m i=1 | y i -f (x i , α) | (3) Here, R emp (α) is a fixed number for a particular choice of α and a particular training set {x i , y i }. 1 2 | y i -f (x i , α) | is known as the loss function. arXiv:1902.04622v1 [cs.LG] 12 Feb 2019 LEARNING THEORY AND SUPPORT VECTOR MACHINES -A PRIMER For binary classification, output values are either 0 or 1. Thus, choosing η such that 0 ≤ η ≤ 1 yields the following bound for the loss function, with probability 1 -η [2]: R(α) ≤ R emp (α) + ( h(log(2m/h) + 1) -log(η/4) m ) h denotes a non-negative integer called the Vapnik Chervonenkis (VC) dimension and describes a property of a set of functions {f (α)}. It can be defined for various classes of functions f . A given set of m observations can be labeled in all possible 2m ways, and for each labeling, a member of the set {f (α)} can be found that correctly assigns those labels. This is described as \"shattering\" this set of observations by that set of functions. Hence, the VC dimension for such a set of functions {f (α)} is defined as the maximum number of training points that can be \"shattered\" by {f (α)}. Note that if the VC dimension would be h, there is at least one particular set of h points that can be shattered. In general, however, it is not the case that each set of h points can be shattered. The second term on the right hand side of equation ( 4 ) is called the \"VC confidence\" and the whole right hand side of equation ( 4 ) the \"risk bound\", which is independent of P (x, y). The risk bound only presumes that both, the training and test data, are drawn independently according to P (x, y). Generally, it is not possible to compute the left hand side, however, if h is known, one can compute the right hand side.",
  "body": "Introduction to Statistical Learning Theory The main goal of statistical learning theory [4] , [2] is to provide a fundamental framework for the problem of decision making and model construction based on sets of data. Assumptions can be made of the statistical nature about the underlying phenomena. One of the original problems in applying statistical learning theory is that of binary pattern recognition. Here, given two classes of entities, one has to assign a novel unclassified object to either of the two classes. This problem can be formalized as follow: Suppose we are given m observations, where each observation i consists of the data x i ∈ R n , i = 1, ..., m, as well as a \"ground truth\" labeling y i ∈ {-1, 1}. Then, given the data (x 1 , y 1 ), ..., (x m , y m ) ∈ X × {-1, 1} we want to estimate a decision function f → X × {-1, 1} that is able to generalize, i.e. avoid model overfitting, to unseen data points, i.e. minimizing the expected risk: R(α) = 1 2 | y -f (x, α) | dP (x, y) (2) It is assumed that some unknown probability distribution P (y, x), from which the data is, independently drawn and identically distributed (iid), drawn, does exists. Therefore, if p(y, x) exists, dP (y, x) may be written as p(x, y)dxdy, in order to state the true error rate. Statistical learning theory proves the necessity to restrict the set of functions from which f can be selected with respect to the capacity suitable for the number of available training data, and it provides some upper bound on the test error, depending on the capacity of the function class as well as the empirical risk. Subsequently, minimizing this bound provides the basis for structural risk minimization [2] . The empirical risk R emp (α) is defined as the measured mean error rate on the training data: R emp (α) = 1 2m m i=1 | y i -f (x i , α) | (3) Here, R emp (α) is a fixed number for a particular choice of α and a particular training set {x i , y i }. 1 2 | y i -f (x i , α) | is known as the loss function. arXiv:1902.04622v1 [cs.LG] 12 Feb 2019 LEARNING THEORY AND SUPPORT VECTOR MACHINES -A PRIMER For binary classification, output values are either 0 or 1. Thus, choosing η such that 0 ≤ η ≤ 1 yields the following bound for the loss function, with probability 1 -η [2]: R(α) ≤ R emp (α) + ( h(log(2m/h) + 1) -log(η/4) m ) h denotes a non-negative integer called the Vapnik Chervonenkis (VC) dimension and describes a property of a set of functions {f (α)}. It can be defined for various classes of functions f . A given set of m observations can be labeled in all possible 2m ways, and for each labeling, a member of the set {f (α)} can be found that correctly assigns those labels. This is described as \"shattering\" this set of observations by that set of functions. Hence, the VC dimension for such a set of functions {f (α)} is defined as the maximum number of training points that can be \"shattered\" by {f (α)}. Note that if the VC dimension would be h, there is at least one particular set of h points that can be shattered. In general, however, it is not the case that each set of h points can be shattered. The second term on the right hand side of equation ( 4 ) is called the \"VC confidence\" and the whole right hand side of equation ( 4 ) the \"risk bound\", which is independent of P (x, y). The risk bound only presumes that both, the training and test data, are drawn independently according to P (x, y). Generally, it is not possible to compute the left hand side, however, if h is known, one can compute the right hand side. Structural Risk Minimization Thus, given several different families of functions f (x, α), called \"learning machines\" and choosing a fixed, sufficiently small η, by then taking that machine which minimizes the right hand side, one can choose that machine which provides the lowest upper bound on the actual risk. This provides a method for selecting a learning machine for a given task and is the fundamental idea of structural risk minimization. The VC confidence is described as a monotonic increasing function of h (see in figure 1 ) for any number of observations m and given a selection of learning machines whose empirical risk would be equal to zero, one wants to select a learning machine whose set of functions, associated with it, has a minimal VC dimension, which then leads to a better upper bound on the actual error, as illustrated in figure 1 . In general, for non zero empirical risk, one selects that specific learning machine that will minimize the right hand side of equation ( 4 ). Figure 1 : Finding the best model complexity to avoid underfitting, i.e. not being able to separate the data appropriately, as well as overfitting, i.e. no being able to generalize to unseen data. Support Vector Machines Support Vector Machines can be considered an approximate implementation of the principle of structural risk minimization, as they try to minimize a combination of the empirical risk in equation ( 3 ), and a capacity term derived for the class of hyper-planes in a dot product space H [2], w, x + b = 0 with w ∈ H, b ∈ R (5) corresponding to decision functions f (x) = sgn( w, x + b). (6) Hard and Soft Margin Solutions In case of a linearly separable set of observations, a unique optimal hyper-plane exists, differentiated by the maximal margin of separation between any observation point x i and the hyper-plane, as visualized in figure 2 (left). Such a case is called a hard margin solution. This optimal hyper-plane would be the solution of maximize w∈H,b∈R min{ x -x i | x ∈ H, w, x + b = 0, i = 1, ..., m} (7) Further, the capacity of the class of separating hyper-planes decreases with increasing margin. As illustrated in figure 2 (left), in order to construct the optimal hyper-plane, on needs to solve the following quadratic programming problem minimize w∈H,b∈R 1 2 w 2 subject to y i ( w, x i + b) ≥ 1 ∀i = 1, ..., m (8) The constraints ensure that f (x i ) will be +1 for y i = +1, and -1 for y i = -1. This constrained optimization problem in equation ( 8 ) is computed based on Lagrange multipliers [1] α i ≥ 0 (α := (α 1 , ..., α m )) and a Lagrangian L(w, b, α) = 1 2 w 2 - m i=1 α i (y i ( w, x i + b) -1) (9) L has some saddle point in w, b and α at the optimal solution of the primal optimization problem. Therefore, it is minimized with respect to the primal variables w and b and maximized with respect to the dual variables α i . Moreover, the product between constraints and Lagrange multipliers in L diminishes at optimality, i.e., α i (y i ( w, x i + b) -1) = 0 ∀i = 1, ..., m (10) known in optimization theory [3] as Karush-Kuhn-Tucker conditions [3] , [1] . Minimization with respect to the primal variables requires ∂ ∂ b L(w, b, α) = - m i=1 α i y i = 0 (11) The solution has some expansion in terms of a subset of the observations, i.e. the Support Vectors, with non-zero α i : Most often, only a fraction of the training examples actually end up being Support Vectors and due to the Karush-Kuhn-Tucker conditions, Support Vectors define the margin (see figure 2 (left)). Thus, once all α i have been found, we can compute b . All remaining training examples (x j , y j ) turn out to be irrelevant as their constraints y j ( w, x j + b) ≥ 1 can be discarded. Therefore, the hyper-plane is completely determined by the observations closest to them. Substitution of equation (11) and equation (12) by the Lagrangian in equation (9) eliminates the primal variables w and b, resulting in the dual optimization problem: ∂ ∂ w L(w, b, α) = w - m i=1 α i y i x i = 0 (12) maximize α∈R m m i=1 α i - 1 2 m i,j=1 α i α j y i y j K ij subject to α i ≥ 0 ∀i = 1, ..., m ∧ m i=1 α i y i = 0 (13) with K ij := x i , x j . Based on equation (12), the decision function in equation ( 6 ) is written as f (x) = sgn m i=1 y i α i x, x i + b (14) Here, b can be computed using equation (10). In practise, however, a separating hyper-plane may not exist, e.g. if noise within the training data causes a large overlap of the classes. In consideration of such a case, slack variables ξ i ≥ 0 ∀i = 1, ..., m are introduced in order to relax the constraints of equation ( 8 ) to y i ( w, x i + b) ≥ 1 -ξ i ∀i = 1, ..., m (15) Thus, a learning machine that generalizes appropriately is found by controlling both, the classifier capacity, based on w , and the sum of the slack variables m i=1 ξ i , which provides an upper bound on the number of training errors. Such a classifier, known as soft margin solutions, is obtained by minimizing the objective function 1 2 w 2 + C m i=1 ξ i (16) subject to the constraints on ξ i and equation (15). The constant C > 0 determines the trade-off between margin maximization and training error minimization. Again, this leads to the problem of maximizing equation ( 13 ), subject to modified constraint with the only difference from the separable case being an upper bound C on the Lagrange multipliers α i . Another realization replaces the parameter C by a parameter ν ∈ (0, 1] that provides upper and lower bounds for the subset of examples which become Support Vectors and those which will have non-zero slack variables, respectively [2] . Non Linear Support Vector Machines If the decision function f in equation ( 6 ) is not linear, all above methods have to be generalized to these cases. Boser et al. [5] , proved that a rather old method [6] , referred to as kernel trick, can be used to accomplish this in a straightforward manner. Thereby, symmetric similarity measures of the form k : H × H → R, with (x, x ) → k(x, x ), are considered. These functions, given two observations x and x return a real number value denoting their similarity. To allow for a variety of similarity measures and learning algorithms, the observations are represented as vectors in an arbitrary selected feature space Φ, due to the mapping: Φ = X → H with x → Φ(x). The function k is often referred to as a kernel. Some popular kernel choice are Gaussian, k(x, x ) = e -x-x 2 2σ 2 , or Radial Basis Functions, k(x, x ) = e γ x-x 2 , as shown in figure 2 (right). Finally, f can be rewritten as f (x) = sgn m i=1 y i α i k(x, x i ) + b (17) Furthermore, in the quadratic optimization problem (13) the definition of K ij becomes K ij = k(x i , x j ). Probability Estimates As discussed, Support Vector Machines predict only class labels without probability information. However, several extensions to provide probability estimates have been presented [7] , [8] . Briefly, given n classes of data, for any observation x, the goal would be to estimate p i = P (y = i|x), i = 1, ..., n Following [7] , [8] , in the context of the one-against-one (i.e., pairwise) approach for multi-class classification, we first estimate pairwise class probabilities as r ij ≈ P (y = i|y = i ∧ j, x) (19) If f is the decision value at x, then we assume r ij ≈ 1 1 + e A f +B (20) where A and B are estimated by minimizing the negative log likelihood of training data, using their labels and decision values. It has been observed that decision values from training may overfit the model in equation (20), so cross-validation is conducted to obtain decision values before minimizing the negative log likelihood. After collecting all r ij values, Wu et al. [7] propose various possible approaches to obtain p i , ∀i. Figure 2 : 2 Figure 2: Left: Linear separable classification. Optimal hyperplane is shown as a solid line. Weight vector w and a threshold b yield y i ( w, x i + b) > 0 ∀i = 1, ..., m. Support Vectors lie on the borders of the margin (dashed lines). Right: Examples of a non-linear separation surface found using a radial basis function kernel k(x, x ) = e -x-x 2 ."
}