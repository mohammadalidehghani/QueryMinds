{
  "title": "Pymc-learn: Practical Probabilistic Machine Learning in Python",
  "abstract": "Pymc-learn is a Python package providing a variety of state-of-the-art probabilistic models for supervised and unsupervised machine learning. It is inspired by scikit-learn and focuses on bringing probabilistic machine learning to non-specialists. It uses a general-purpose high-level language that mimics scikit-learn. Emphasis is put on ease of use, productivity, flexibility, performance, documentation, and an API consistent with scikit-learn. It depends on scikit-learn and pymc3 and is distributed under the new BSD-3 license, encouraging its use in both academia and industry. Source code, binaries, and documentation are available on http://github.com/pymc-learn/pymc- learn.",
  "introduction": "Introduction Currently, there is a growing need for principled machine learning approaches by nonspecialisits in many fields including the pure sciences (e.g. biology, physics, chemistry), the applied sciences (e.g. political science, biostatistics), engineering (e.g. transportation, mechanical), medicine (e.g. medical imaging), the arts (e.g visual art), and software industries. This has lead to increased adoption of probabilistic modeling. This trend is attributed in part to three major factors: (1) the need for transparent models with calibrated quantities of uncertainty, i.e. \"models should know when they don't know \", (2) the ever-increasing number of promising results achieved on a variety of fundamental problems in AI (Ghahramani, 2015) , and (3) the emergency of probabilistic programming languages (PPLs) that provide a flexible framework to build richly structured probabilistic models that incorporate domain knowledge. However, usage of PPLs requires a specialized understanding of probability theory, probabilistic graphical modeling, and probabilistic inference. Some PPLs also require a good command of software coding. These requirements make it difficult for non-specialists to adopt and apply probabilistic machine learning to their domain problems. Pymc-learn foot_0 seeks to address these challenges by providing state-of-the art implementations of several popular probabilistic machine learning models. It is inspired by scikitlearn (Pedregosa et al., 2011) and focuses on bringing probabilistic machine learning to non-specialists. It puts emphasis on ease of use, productivity, flexibility, performance, documentation and an API consistent with scikit-learn. The underlying probabilistic models are built using pymc3 (Salvatier et al., 2016) .",
  "body": "# Linear regression in Pymc-learn from pmlearn.linear_model \\ import LinearRegression lr = LinearRegression() lr.fit(X_train, y_train) lr.score(X_test, y_test) lr.predict(X_test) lr.save(\"path/to/saved-model\") # Gaussian process regression in Pymc-learn from pmlearn.gaussian_process \\ import GaussianProcessRegressor() gpr = GaussianProcessRegressor() gpr.fit(X_train, y_train) gpr.score(X_test, y_test) gpr.predict(X_test) gpr.save(\"path/to/saved-model\") # Linear regression in Scikit-learn from sklearn.linear_model \\ import LinearRegression lr = LinearRegression() lr.fit(X_train, y_train) lr.score(X_test, y_test) lr.predict(X_test) lr.save(\"path/to/saved-model\") # Gaussian process regression in Scikit-learn from sklearn.gaussian_process \\ import GaussianProcessRegressor() gpr = GaussianProcessRegressor() gpr.fit(X_train, y_train) gpr.score(X_test, y_test) gpr.predict(X_test) gpr.save(\"path/to/saved-model\") The fit method estimates model parameters using either variational inference (pymc3.ADVI) or MCMC (pymc3.NUTS). Introduction Currently, there is a growing need for principled machine learning approaches by nonspecialisits in many fields including the pure sciences (e.g. biology, physics, chemistry), the applied sciences (e.g. political science, biostatistics), engineering (e.g. transportation, mechanical), medicine (e.g. medical imaging), the arts (e.g visual art), and software industries. This has lead to increased adoption of probabilistic modeling. This trend is attributed in part to three major factors: (1) the need for transparent models with calibrated quantities of uncertainty, i.e. \"models should know when they don't know \", (2) the ever-increasing number of promising results achieved on a variety of fundamental problems in AI (Ghahramani, 2015) , and (3) the emergency of probabilistic programming languages (PPLs) that provide a flexible framework to build richly structured probabilistic models that incorporate domain knowledge. However, usage of PPLs requires a specialized understanding of probability theory, probabilistic graphical modeling, and probabilistic inference. Some PPLs also require a good command of software coding. These requirements make it difficult for non-specialists to adopt and apply probabilistic machine learning to their domain problems. Pymc-learn foot_0 seeks to address these challenges by providing state-of-the art implementations of several popular probabilistic machine learning models. It is inspired by scikitlearn (Pedregosa et al., 2011) and focuses on bringing probabilistic machine learning to non-specialists. It puts emphasis on ease of use, productivity, flexibility, performance, documentation and an API consistent with scikit-learn. The underlying probabilistic models are built using pymc3 (Salvatier et al., 2016) . Design Principles The major driving factor in the design of pymc-learn was to prioritize user experience, especially for non-specialists. This was achieved by adhering to the following design principles. Ease of use. Pymc-learn mimics the syntax of scikit-learn -a popular Python library for machine learning -which has a consistent & simple API, and is very user friendly. This makes pymc-learn easy to learn and use for first-time users. Productivity. Scikit-learn users do not have to completely rewrite their code. Users' code looks almost the same. Users are more productive, allowing them to try more ideas faster. (See Figure 1 for a comparision). Flexibility. This ease of use does not come at the cost of reduced flexibility. Given that pymc-learn integrates with pymc3, it enables users to implement anything they could have built in the base language. Performance. Pymc-learn uses several generic probabilistic inference algorithms, including the No U-turn Sampler (Hoffman and Gelman, 2014), a variant of Hamiltonian Monte Carlo (HMC). However, the primary inference algorithm is gradient-based automatic differention variational inference (ADVI) (Kucukelbir et al., 2017) , which estimates a divergence measure between approximate and true posterior distributions. Pymc-learn scales to complex, high-dimensional models thanks to GPU-accelerated tensor math and reverse-mode automatic differentiation via Theano (Theano Development Team, 2016) , and it scales to large datasets thanks to estimates computed over mini-batches of data in ADVI. Project Openness and Development Source code for pymc-learn is freely available under the new BSD-3 license and developed by the authors and a community of open-source contributors at https://github.com/  pymc-learn . Documentation, examples, and a discussion forum are hosted online at https://pymc-learn.org . A comprehensive test suite is run automatically by a continuous integration service before code is merged into the main codebase to maintain a high level of project quality and usability. Illustration Built distributions of pymc-learn are available for download from PyPi. Source code is available on GitHub. For illustration purposes, the following sections describe how pymc-learn can be used in a workflow that mimics scikit-learn. Install pymc-learn from PyPi: $ pip install pymc-learn Or from source: $ pip install git+https ://github.com/pymc-learn/pymc-learn Consider that some data has been imported into a Python environment as shown in Figure 2 . from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3) 4.8 Visualize traceplots import arviz as az az.plot_trace(model.trace); Figure 4: Traceplot Conclusion Pymc-learn exposes a wide variety of probabilistic machine learning models for both supervised and unsupervised learning. It is inspired by scikit-learn with a focus on non-specialists. Future work includes adding more probabilistic models including hidden markov models, Bayesian neural networks, and many others. Figure 1 : 1 Figure 1: An example comparing pymc-learn models and scikit-learn estimators: the probabilistic models (LinearRegression and GaussianProcessRegressor) are pymc3.Model objects.The fit method estimates model parameters using either variational inference (pymc3.ADVI) or MCMC (pymc3.NUTS). Figure 2 : 2 Figure 2: Sample data Figure Figure 3: ELBO plot http://pymc-learn.org/"
}