{
  "title": "Data Pricing in Machine Learning Pipelines",
  "abstract": "Machine learning is disruptive. At the same time, machine learning can only succeed by collaboration among many parties in multiple steps naturally as pipelines in an eco-system, such as collecting data for possible machine learning applications, collaboratively training models by multiple parties and delivering machine learning services to end users. Data is critical and penetrating in the whole machine learning pipelines. As machine learning pipelines involve many parties and, in order to be successful, have to form a constructive and dynamic eco-system, marketplaces and data pricing are fundamental in connecting and facilitating those many parties. In this article, we survey the principles and the latest research development of data pricing in machine learning pipelines. We start with a brief review of data marketplaces and pricing desiderata. Then, we focus on pricing in three important steps in machine learning pipelines. To understand pricing in the step of training data collection, we review pricing raw data sets and data labels. We also investigate pricing in the step of collaborative training of machine learning models, and overview",
  "introduction": "Introduction The disruptive success of machine learning in many applications has led to an explosion in demand [100, 1] . Recent research predicts that the global machine learning market is expected to reach 20.83 billion dollars in 2024 [64] . To succeed in building a machine learning application, one party is far from enough. Many parties have to collaborate in one way or another. For example, one party may have to acquire raw data and data labeling services from some other parties to construct training data, multiple parties may need to collaborate in building a machine learning model, and one party may want to use some other parties' models to solve its business problems. Machine learning applications are indeed pipelines connecting many parties. Data is critical for machine learning. Machine learning models, especially deep models, rely on large amounts of data for training and testing. Deploying machine learning services also needs data -machine learning models consume users' data as input, and return insights and recommend possible actions. Maintaining and updating machine learning models still need data. The importance of data for machine learning cannot be over emphasized. Data penetrates the whole machine learning pipelines. Obtaining data for machine learning is far from easy [61] . For a party that wants to build a machine learning model, the challenges come from multiple aspects. First, within the party, in order to develop a training data set, more often than not it is costly to collect data, create proper labels and ensure data quality. Second, the party may realize that it does not have the necessary data to train the target model. Thus, the party may have to explore external sources for the data needed. This involves acquiring external data. Last, to build or strengthen business edges, the party may want to provide machine learning services to other parties. Then, the party has to exchange data with other parties, such as accessing data from end users and providing end users model output. Connecting many parties in an eco-system in scale requires a general and principled mechanism. As data and models are essential in machine learning pipelines and data and model exchanges are the most fundamental interactions among different parties, data and model marketplaces become a natural choice for machine learning pipelines and eco-systems, and pricing becomes the core mechanism in machine learning pipelines. In response to the massive and diversified demands for various data, data products become valuable assets for purchase and sale. Here, data products refer to data sets as products and information services derived from data sets [80] . Data commoditization motivates data owners to share their data Fig. 1: Steps and pricing tasks in machine learning pipelines products in exchange of rewards and thus helps data buyers to access data products of high quality and large quantities. To enable tradings between data owners and data buyers, data must be priced. Pricing data, however, is far from trivial. Agarwal et al. [1] summarize five properties making data a unique asset. First, data can be replicated at zero marginal cost. Second, the value of data is inherently combinatorial. Third, the value of data varies widely among different buyers. Last, the usefulness of data lies in the value of information derived from it, which is difficult to verify a priori. Due to those properties, pricing models for physical goods cannot be directly applied or straightforwardly extended to data products, and thus new principles, theories, and methods need to be developed. Based on an extensive survey on existing research, we identify and focus on three steps in data and model supply tasks in the manufacturing pipeline of machine learning models [32] . The steps and their corresponding tasks are illustrated in Figure 1 . In the step of training data collection, raw data is collected and the associated labels are annotated. We review the research on pricing for raw data sets and data labels. In the step of collaborative training of machine learning models, we investigate how to price different participants' contributions through their data. In the model deployment step, we overview pricing machine learning models for end users. We focus on the four pricing tasks in machine learning pipelines as follows. -Pricing raw data sets. To build a machine learning model, the first step is collecting training data. Monetizing and trading raw data sets provide people with a convenient and efficient way to acquire a large amount of training data. A key challenge in pricing raw data sets is how to set the price reflecting the usefulness of a data set. Moreover, pricing models may be optimized towards different objectives, such as revenue maximization, arbitrage-freeness, and truthfulness. Achieving those optimization goals in-troduces additional challenges in the design and implementation of pricing models. -Pricing data labels. In the training data collection step, in addition to collecting raw data, obtaining data labels is critical. Crowdsourcing is a popular way for this purpose [102] . Unfortunately, spammers may commit no efforts in their assigned tasks and produce random answers, which leads to data sets of poor quality. Thus, a key challenge in pricing data labels is how to estimate label accuracy and compensate crowdworkers correspondingly, such that they are motivated and driven to invest high efforts and report accurate data labels [102] . This task only appears in machine learning pipelines where supervised machine learning models are produced. -Revenue allocation in collaborative machine learning. Collaborative machine learning is an emerging paradigm, where multiple data owners collaboratively train machine learning models on their aggregate data, and share the revenues of using/selling these models. Data sets from different owners may have different contributions to the learned models. Evenly distributing the revenues is not fair to data owners, particularly for those who contribute more valuable data, and thus may discourage future collaborations. To this end, a key challenge is how to fairly reward data owners' contributions. -Pricing machine learning models. Machine learning as a service (MLaaS) [100, 17] is a rapidly growing industry. Customers may purchase well-trained machine learning models or build models on top of those welltrained rather than building models from scratch by themselves. For example, one may use Google prediction API to classify an image for only $0.0015 [17] . While machine learning models and raw data sets share a series of common ideas in pricing, the pricing models of raw data sets cannot be trivially adapted to price machine learning models. How to version machine learning models and avoid arbitrage among multiple versions is a key challenge in this task. The four tasks are related to each other. They share some core ideas, that is, linking prices of data products to their utilities to customers. But as the tasks have different application scenarios and pricing goals, they are solved by orthogonal techniques. The existing models in the first two tasks aim at pricing training data sets with absolute utility functions, that is, the utility of a data product only depends on the properties of the product. One important difference between the first two tasks is about the utility functions. The utility (e.g., accuracy) of data labels is very hard to compute due to the lack of ground-truth verifications. The third task evaluates the utility of a data set by its marginal contribution to a machine learning model. Thus, the utility of a data set also depends on the utility of other data sets used to jointly build the model. The existing methods in the last task also employ absolute utility functions. But as machine learning models and data sets have different properties, new pricing models are developed. The four tasks are connected when machine learning models and data sets are priced in an end-to-end manner. On the one hand, the price of a machine learning model limits the budget of training data procurement and the revenue that can be split among data owners [1] . On the other hand, the costs of data procurement and model training also influence the selling price of machine learning models, as they are part of the manufacturing cost [61] . Figure 1 shows the connections of the four tasks. There are some previous surveys related to data pricing [58, 31, 110] . This article covers a substantially deeper and more focused scope than those. In this article, we try to present a comprehensive survey on data pricing in machine learning pipelines. Very recently, Pei [80] presents a survey connecting economics, digital product pricing, and data product pricing. He identifies a series of desirable properties in data pricing and reviews the techniques achieving those properties. But Pei [80] does not focus on machine learning pipeline and does not cover the studies of pricing data labels. The rest of this survey is organized as follows. Section 2 reviews basic concepts and essential principles in data product pricing. Section 3 reviews pricing raw data sets. Pricing data labels is discussed in Section 4. In Section 5, we review the recent progress in revenue allocation in collaborative machine learning. Section 6 is about how to price machine learning models. We conclude this survey and discuss some future directions in Section 7.",
  "body": "Introduction The disruptive success of machine learning in many applications has led to an explosion in demand [100, 1] . Recent research predicts that the global machine learning market is expected to reach 20.83 billion dollars in 2024 [64] . To succeed in building a machine learning application, one party is far from enough. Many parties have to collaborate in one way or another. For example, one party may have to acquire raw data and data labeling services from some other parties to construct training data, multiple parties may need to collaborate in building a machine learning model, and one party may want to use some other parties' models to solve its business problems. Machine learning applications are indeed pipelines connecting many parties. Data is critical for machine learning. Machine learning models, especially deep models, rely on large amounts of data for training and testing. Deploying machine learning services also needs data -machine learning models consume users' data as input, and return insights and recommend possible actions. Maintaining and updating machine learning models still need data. The importance of data for machine learning cannot be over emphasized. Data penetrates the whole machine learning pipelines. Obtaining data for machine learning is far from easy [61] . For a party that wants to build a machine learning model, the challenges come from multiple aspects. First, within the party, in order to develop a training data set, more often than not it is costly to collect data, create proper labels and ensure data quality. Second, the party may realize that it does not have the necessary data to train the target model. Thus, the party may have to explore external sources for the data needed. This involves acquiring external data. Last, to build or strengthen business edges, the party may want to provide machine learning services to other parties. Then, the party has to exchange data with other parties, such as accessing data from end users and providing end users model output. Connecting many parties in an eco-system in scale requires a general and principled mechanism. As data and models are essential in machine learning pipelines and data and model exchanges are the most fundamental interactions among different parties, data and model marketplaces become a natural choice for machine learning pipelines and eco-systems, and pricing becomes the core mechanism in machine learning pipelines. In response to the massive and diversified demands for various data, data products become valuable assets for purchase and sale. Here, data products refer to data sets as products and information services derived from data sets [80] . Data commoditization motivates data owners to share their data Fig. 1: Steps and pricing tasks in machine learning pipelines products in exchange of rewards and thus helps data buyers to access data products of high quality and large quantities. To enable tradings between data owners and data buyers, data must be priced. Pricing data, however, is far from trivial. Agarwal et al. [1] summarize five properties making data a unique asset. First, data can be replicated at zero marginal cost. Second, the value of data is inherently combinatorial. Third, the value of data varies widely among different buyers. Last, the usefulness of data lies in the value of information derived from it, which is difficult to verify a priori. Due to those properties, pricing models for physical goods cannot be directly applied or straightforwardly extended to data products, and thus new principles, theories, and methods need to be developed. Based on an extensive survey on existing research, we identify and focus on three steps in data and model supply tasks in the manufacturing pipeline of machine learning models [32] . The steps and their corresponding tasks are illustrated in Figure 1 . In the step of training data collection, raw data is collected and the associated labels are annotated. We review the research on pricing for raw data sets and data labels. In the step of collaborative training of machine learning models, we investigate how to price different participants' contributions through their data. In the model deployment step, we overview pricing machine learning models for end users. We focus on the four pricing tasks in machine learning pipelines as follows. -Pricing raw data sets. To build a machine learning model, the first step is collecting training data. Monetizing and trading raw data sets provide people with a convenient and efficient way to acquire a large amount of training data. A key challenge in pricing raw data sets is how to set the price reflecting the usefulness of a data set. Moreover, pricing models may be optimized towards different objectives, such as revenue maximization, arbitrage-freeness, and truthfulness. Achieving those optimization goals in-troduces additional challenges in the design and implementation of pricing models. -Pricing data labels. In the training data collection step, in addition to collecting raw data, obtaining data labels is critical. Crowdsourcing is a popular way for this purpose [102] . Unfortunately, spammers may commit no efforts in their assigned tasks and produce random answers, which leads to data sets of poor quality. Thus, a key challenge in pricing data labels is how to estimate label accuracy and compensate crowdworkers correspondingly, such that they are motivated and driven to invest high efforts and report accurate data labels [102] . This task only appears in machine learning pipelines where supervised machine learning models are produced. -Revenue allocation in collaborative machine learning. Collaborative machine learning is an emerging paradigm, where multiple data owners collaboratively train machine learning models on their aggregate data, and share the revenues of using/selling these models. Data sets from different owners may have different contributions to the learned models. Evenly distributing the revenues is not fair to data owners, particularly for those who contribute more valuable data, and thus may discourage future collaborations. To this end, a key challenge is how to fairly reward data owners' contributions. -Pricing machine learning models. Machine learning as a service (MLaaS) [100, 17] is a rapidly growing industry. Customers may purchase well-trained machine learning models or build models on top of those welltrained rather than building models from scratch by themselves. For example, one may use Google prediction API to classify an image for only $0.0015 [17] . While machine learning models and raw data sets share a series of common ideas in pricing, the pricing models of raw data sets cannot be trivially adapted to price machine learning models. How to version machine learning models and avoid arbitrage among multiple versions is a key challenge in this task. The four tasks are related to each other. They share some core ideas, that is, linking prices of data products to their utilities to customers. But as the tasks have different application scenarios and pricing goals, they are solved by orthogonal techniques. The existing models in the first two tasks aim at pricing training data sets with absolute utility functions, that is, the utility of a data product only depends on the properties of the product. One important difference between the first two tasks is about the utility functions. The utility (e.g., accuracy) of data labels is very hard to compute due to the lack of ground-truth verifications. The third task evaluates the utility of a data set by its marginal contribution to a machine learning model. Thus, the utility of a data set also depends on the utility of other data sets used to jointly build the model. The existing methods in the last task also employ absolute utility functions. But as machine learning models and data sets have different properties, new pricing models are developed. The four tasks are connected when machine learning models and data sets are priced in an end-to-end manner. On the one hand, the price of a machine learning model limits the budget of training data procurement and the revenue that can be split among data owners [1] . On the other hand, the costs of data procurement and model training also influence the selling price of machine learning models, as they are part of the manufacturing cost [61] . Figure 1 shows the connections of the four tasks. There are some previous surveys related to data pricing [58, 31, 110] . This article covers a substantially deeper and more focused scope than those. In this article, we try to present a comprehensive survey on data pricing in machine learning pipelines. Very recently, Pei [80] presents a survey connecting economics, digital product pricing, and data product pricing. He identifies a series of desirable properties in data pricing and reviews the techniques achieving those properties. But Pei [80] does not focus on machine learning pipeline and does not cover the studies of pricing data labels. The rest of this survey is organized as follows. Section 2 reviews basic concepts and essential principles in data product pricing. Section 3 reviews pricing raw data sets. Pricing data labels is discussed in Section 4. In Section 5, we review the recent progress in revenue allocation in collaborative machine learning. Section 6 is about how to price machine learning models. We conclude this survey and discuss some future directions in Section 7. Data Marketplaces and Pricing In this section, we briefly review data marketplaces and pricing in general. We first discuss the basic structures of data marketplaces. Then, we discuss some major pricing strategies in general. Third, we discuss different types of data markets in terms of competition and dominance. Last, we discuss the desiderata of data pricing. Data Marketplaces A data marketplace is a platform that allows people to buy and sell data products [87] . Some examples of data marketplaces include Dawex [22] , Snowflake data marketplace [96], and BDEX [6] . Muschalle et al. [70] identify seven categories of participants in data marketplaces, namely analysts, application vendors, data processing algorithm developers, data providers, consultants, licensing and certification entities, and data market owners. Figure 2a shows the conceptual architecture of data marketplaces. A data marketplace mainly consists of three major entities, namely data sellers, an arbiter (also known as data vendor [87] and data broker [78] ), and data buyers. Data sellers own data products and are willing to share those products with the arbiter in exchange for rewards. Data buyers want to obtain data products to solve their problems. The function of an arbiter is to facilitate transactions  between data sellers and data buyers. The arbiter collects data products from data sellers and sells them to data buyers. After collecting the payments from buyers, the arbiter distributes the payments to data sellers. In general, arbiters are modeled as non-profit participants in data marketplaces. Some studies simplify the architecture of data marketplaces to sell-side marketplaces and buy-side marketplaces. A sell-side marketplace [110] , as shown in Figure 2b , has a single data provider and multiple data buyers. In a sell-side marketplace, the arbiter is operated by a monopoly data seller to sell the single seller's data products. In literature, sell-side marketplaces are considered by pricing models of both general data sets [39] and specific types of data products, such as XML documents [99] and data queries on a relational database [25] . A buy-side marketplace [110] , as shown in Figure 2c , has multiple data providers and a single consumer/data buyer. In a buy-side marketplace, the arbiter is operated by the single data buyer for purchasing data products from providers. Buy-side marketplaces are considered in many existing studies [33, 2, 45] . For instance, de Alfaro et al. [2] study a buy-side marketplace, where a single consumer pays crowdsource workers for labeling the single buyer's data set. Pricing Strategies Many pricing strategies have been developed in pricing theory. Cost-based pricing, customer value-based pricing, and competition-based pricing are three important categories [23] . Cost-based pricing considers that the price of a product is determined by adding a specific amount of markup to the cost. This strategy is adopted in personal data pricing, where the cost is the total privacy compensation to data owners [78] . A disadvantage of the cost-based pricing strategy is that it only considers internal factors in determining the selling price. External factors, such as competition and demands, are not included [65] . Customer value-based pricing determines the price of a product primarily based on how much the target customers believe a product is worth [23] . To apply customer value-based pricing, a seller needs to estimate customers' demands for a product through their willingness and affordability [65] . Customer value-based pricing is the most popularly used strategy for data pricing. Competition-based pricing determines the price of a product strategically based on competitors' price levels and behavior expectations [23] . Game theory provides a powerful tool to implement the strategy. In a non-cooperative game, every seller is selfish and sets the price that maximizes the seller's profit independently [65] . The competition result, that is the asking price of each seller, is the Nash equilibrium [74] . There are some other major pricing strategies in literature [27, 72, 8, 76, 44] , such as operation-oriented pricing, revenue-oriented pricing, and relationshiporiented pricing. The remarkably rich body of studies in economics and marketing research on pricing tactics is far beyond the scope and capacity of this survey. Four Types of Data Markets Similar to physical goods, the prices of data products are also influenced by the dominance and diversity of supplies and demands in the market. Fricker and Maksimov [31] identify four types of data markets. First, in a monopoly, a supplier holds enough market power to set prices to maximize profits. Second, in an oligopoly, a small number of suppliers dominate the market. Third, in strong competition markets, individual suppliers do not have enough market powers to set profit-maximizing prices, and prices tend to align with marginal costs. Last, in a monopsony, a single buyer controls the market as the only consumer of products provided by sellers. Most studies assume explicitly or implicitly a monopoly (monopsony) market structure where the data seller (data buyer) does not care about competing with others. Data pricing in oligopoly market is considered by Balasubramanian et al. [5] . Jiang et al. [47] study a perfect competition market where participants can directly trade with each other. Desiderata of Data Pricing There are some desiderata perferred by most pricing models. In this section, we briefly review the six desiderata suggested by Pei [80] . In addition, we complement the existing study by an important desideratum, effort elicitation. Truthfulness Truthfulness is an important economic property of robust markets [113] . In a truthful market, all participants are selfish and only offer prices that maximize their utility values. Participants may have their own valuations on the same product, but a truthful market guarantees that for each participant, offering the real valuation is an individual's best strategy. In other words, no participants will lie about their valuations. Truthfulness simplifies all participants' strategies and ensures basic market fairness [30] . Reverse auction is a common tool to implement truthful data markets. In a reverse auction, N sellers D = {s 1 , . . . , s N } compete for a buyer's deal by submitting their asking prices {b 1 , . . . , b N }. An auction mechanism takes as input the submitted bids, selects a subset of sellers as winners, and determines the payment p i to each winner s i , where p i ≥ b i . In a truthful reverse auction, the best strategy (dominant strategy) for a seller s i to maximize the expected utility is submitting the individual's real valuation, no matter what others submit. In his seminal paper on optimal mechanism design, Myerson [71] shows that a sealed-bid reverse auction mechanism is truthful if and only if (1) The selection rule is monotone, that is, if a seller s i wins the auction by bidding b i , it also wins by bidding b i ≤ b i ; and (2) Each winner is paid the critical value, that is, seller s i would not win the auction if s i bids higher than this value. Revenue Maximization Revenue maximization is a strategy to increase a seller's customer base by having low prices. This strategy is widely adopted by sellers in an emerging market to build market share and reputations. For traditional physical goods, the curves of marginal cost are U-shaped with respect to manufacturing level. The revenue of a seller is maximized when the manufacturing level is set such that the marginal revenue is zero [11] . Since data products can be re-produced at almost zero costs [1] , the revenue maximization techniques for data products and physical products are quite different [80] . Fairness In some scenarios, sellers need to cooperatively participate in a transaction. A data market is fair to the contributors in a coalition if the revenue generated by the coalition is fairly divided among the sellers. Suppose a set of sellers D = {s 1 , . . . , s N } cooperatively participate in a transaction that leads to a payment v. Shapley [91] lays out four axioms for a fair allocation. -Balance: The payment v should be fully distributed to the sellers in D. -Symmetry: Sellers making the same contribution to the payment should be paid the same. For a set of sellers S and two additional sellers s and s , if S ∪ {s} and S ∪ {s } lead to the same payment, sellers s and s should get the same payment. -Zero element: If a seller's data does not contribute to the payment of any coalitions, the seller should receive no payment. -Additivity: If the data of a group of sellers can be used for two tasks t 1 and t 2 with payments v 1 and v 2 , respectively, then the payment to solve both tasks t 1 + t 2 should be v 1 + v 2 . It is proved that Shapley value ψ(s) is the unique allocation method that satisfies the four axioms, which is defined as the average marginal contribution of s i to all possible subsets of sellers S ⊆ D \\ {s i } ψ(s) = 1 N S⊆D\\{s} U(S ∪ {s}) -U(S) N -1 |S| , (1) where U(•) is the utility function [91] . For example, in the context of collaborative machine learning, U(S) is the performance score of the machine learning model trained on the data sets of S, such as precision. Equation 1 can be rewritten to ψ(s) = 1 N ! π∈ (D) (U(P π s ∪ {s} -U(P π s ))), (2) where π ∈ (D) is a permutation of sellers and P π s is the set of sellers that precede seller s in π. The fact that Shapley value uniquely possesses Shapley fairness, combined with its flexibility to support different utility functions, makes it a popular tool to implement fair data marketplaces. Arbitrage-free Pricing Arbitrage is the activities that take advantage of price differences between multiple markets. In a data marketplace, a data seller may offer multiple versions of products. As a consequence, a critical concern is that a data buyer may circumvent the advertised price of a product through buying a bundle of cheaper ones, which negatively affects the seller's revenue. For example, consider a data seller selling noisy queries to the seller's database [78, 80] , and the seller perturbs each query answer independently with random noise. An answer with a variance of 5 is sold at $5 and with a variance of 1 is sold at $50. A data buyer wants to obtain an answer of variance 1. The buyer can purchase the cheaper answer 5 times and compute their average. Since the noises are added independently, the aggregated average has variance 1. Thus the customer saves $25 by arbitrage. A desirable pricing function should guarantee that no arbitrage is possible, in which case we call it arbitrage-free. Privacy-preservation Privacy protection during the transactions of data raises more and more concerns. In data marketplaces, the privacy of buyers, sellers, and involved third parties are highly vulnerable, and might be disclosed in many different ways [80] . Many different solutions have been proposed for privacy protection in data markets [30, 57, 43] . In this survey, we focus on the studies along the line of privacy compensation [57, 78, 77] , which investigate how to provide compensations for the privacy disclosure of data owners. For the purpose of privacy protection, sensitive data sets are usually traded with injected random noise [77] . A data set with less random noise is more accurate, but may leak more privacy and thus more compensations should be made to the data owner. Computational Efficiency The numbers of transactions, sellers and buyers may be huge in a data marketplace. Therefore, it is a fundamental requirement for a pricing model to compute prices efficiently with respect to a large number of goods and participants. Prices should be computed in polynomial time with respect to the number of participants [1] or the number of data products [16] . In some application scenarios, however, it takes exponential time to compute the pricing functions with desirable properties, such as Shapley fairness [33] , arbitrage-freeness [53] , and revenue maximization [16] . For example, Koutris et al. [53] show that computing arbitrage-free prices of join queries on a relational database is in general NP-hard. How to efficiently determine prices with desirable properties presents technical challenges. Effort Elicitation In addition to the above six desiderata, here we propose a new one, effort elicitation. In a data marketplace, a data buyer may purchase training data labels via crowdsourcing. Crowdworkers are presented with unlabeled data instances (for instance, images) and are asked to provide labels (for instance, a binary label indicating whether or not the image contains pedestrains). A major challenge in label collection is to ensure that workers invest their efforts and provide accurate answers. A poorly designed pricing model may result in labels with very low quality [88] . For example, if each task has a fixed price, an obvious strategy that maximizes a worker's profit is to just provide arbitrary answers without even solving the tasks [102] . Many techniques have been developed to post-process noisy answers in order to improve their quality. However, when the inputs to these algorithms are highly erroneous, it is difficult to guarantee that the processed answers will be reliable enough for downstream machine learning tasks [88] . In order to avoid the troubles of \"garbage in, garbage out\", a desirable approach is to design proper rewards for crowdsourcing tasks that incent workers to invest efforts and provide higher quality answers [102] . Pricing Raw Data Sets In this section, we review the existing studies focusing on pricing raw data sets. The existing studies consider four types of scenarios. The most tradi-tional methods price data sets as indivisible units and do not consider supplier competitions. The intrinsic properties of data sets, such as volumes, are factors determining prices. In the second scenario, how to price indivisible data sets in a competitive market is studied. In the third scenario, data consumers can purchase just a fraction of an entire data set, which is more flexible to consumers but may have the issue of arbitrage. The last scenario addresses pricing personal data by privacy compensation. Pricing General Data Machine learning and statistical models are vulnerable to poor quality training data, thus high quality data is valuable to data buyers [102] . Pricing data sets based on quality becomes a natural choice. Heckman et al. [39] identify a list of factors to assess the quality of a data set, such as age of data, accuracy of data, and volume of data. A linear model is proposed to set the price of a data set as price = Fixed cost + i w i • factor i . Estimating the model parameters w i is a difficult task, as many data sets may not have public prices associated with them. A more comprehensive list of quality criteria is proposed in [97] . Yu and Zhang [107] study the problem of trading multiple versions of a data set, constructed by different data quality factors. They assume customers' demands and maximum acceptable prices of different versions are public. A bi-level programming model is established to address the problem. At the first level, the data seller determines versions and their prices to maximize the total revenue. At the second level, a group of buyers select data products to maximize their utilities. Solving the bi-level programming model is NPhard. Yu and Zhang [107] propose a heuristic genetic algorithm to approach it numerically. Pricing Crowdsensing Data Crowdsensing is a powerful tool to quickly and cheaply obtain vast amounts of training data for machine learning models [102, 112] . In a crowdsensing marketplace, a task requester initiates a data collection task and compensates participating workers according to their reported costs. As workers may exaggerate their costs, pricing models should incentivize workers to truthfully reveal their costs. Yang et al. [105] design a reverse auction mechanism for mobile sensing data, that is truthful, individually rational, and profitable. A pricing model is truthful if all sellers truthfully report their data collection costs. A model is individually rational if all sellers have non-negative net profits, and profitable if the data buyer has non-negative net profits. The authors assume that a buyer has a set Γ = {τ 1 , . . . , τ n } of sensing tasks, where each task τ i has a value v i to the buyer. Each seller s i chooses a subset of tasks Γ i ⊆ Γ and has a private cost c i for performing the tasks. Seller s i decides a price b i for the sensed data and submits the task-bid pair (Γ i , b i ) to the buyer. After collecting all bids, the buyer selects a subset of sellers S as winners and determines the payment p i to each winner s i . The proposed auction mechanism, MSensing, selects winners S in a greedy manner. Starting with S = ∅, it iteratively chooses the seller that brings the largest non-negative net marginal profit. Each winner s i ∈ S is paid the critical value p i of s i , that is, seller s i would not win the auction if s i bids higher than p i . Specifically, MSensing runs the winner selection algorithm over users S = U \\ {s i }. The payment p i is the largest price s i can bid, such that s i can replace a user in S . Please note that p i ≥ b i , this is because due to incomplete cost information, the buyer provides extra compensations to sellers on top of their bids to motivate them to reveal actual costs. MSensing satisfies Myerson's characterization of truthful auction mechanisms [71] . The follow-up work by Jin et al. [48] considers the situation where a data buyer has a data quality requirement Q j for each sensing task t j . The authors propose a Vickrey-Clarke-Groves mechanism [4] like truthful reverse combinatorial auction. They assume that the data quality q i of each seller s i is public and q i is the same for all sensing tasks. The authors first consider the scenario where each seller only bids for one bundle of sensing tasks Γ i . The auction winners S must satisfy the quality requirement for each task t j , that is, si∈S, if tj ∈Γi q i ≥ Q j . The objective of the auction is to maximize the total utility of the buyer and the sellers. The authors prove that winner determination under the setting is NP-hard and propose a greedy winner selection algorithm with a guaranteed approximation ratio to the optimal total utility. Each winner is paid by the winner's critical payment. The authors further study the total utility maximization problem in a more general scenario, where each seller can bid for multiple bundles of tasks. They propose an iterative descending algorithm that achieves close-to-optimal total utility. However, the auction is not truthful. Koutsopoulos [55] considers a similar setting as Jin et al. [48] do, but assumes that a data buyer has only one sensing task. The author proposes a truthful reverse auction that minimizes the expected cost of the buyer while guaranteeing the data quality requirement. The author assumes that the data buyer has prior knowledge about the distribution of each seller s i 's unit participation cost c i . The units of participation x i of s i is a positive real value indicating how much data is purchased from s i . Given the sellers' bids, the data buyer determines the auction winners and their participation units by solving a linear programming model, which minimizes the total expected payment under the data quality constraint. Critical payments are made to the selected winners. All sellers bidding truthfully forms a Bayesian Nash equilibrium [56] . Pricing Data Queries Query-based pricing models tailor the purchase of data to users' needs. Customers can purchase their interested parts of a data set through data queries, and are charged according to their issued queries. While such a marketplace mechanism provides greater flexibility to buyers, a less carefully designed pricing model may open the loophole for arbitrage, which allows buyers to obtain a query result in a cost less than the advertised prices. Given a database D and a multi-set of query bundles S = {Q 1 , . . . , Q m }, a query bundle Q is determined by S, if the answer to Q can be computed only from the answers to the query bundles in S. A pricing function is arbitragefree if the advertised price π(Q) ≤ m i=1 π(Q i ), that is, the answer to a query bundle Q cannot be obtained more cheaply from an alternative set of query bundles. The first formal framework for arbitrage-free query-based data pricing was introduced by Koutris et al. [53] . The major idea is that a data seller can first specify the prices of a few views V over a database, and then the price of a query bundle Q is decided algorithmically. Theoretically, the authors show that if there are no arbitrage situations among the views in V, there exists a unique arbitrage-free and discount-free pricing function π(Q). Specifically, π(Q) is the total price of the cheapest subset of V that determines Q, which is found by query determinacy [73] . They also show the complexity of evaluating the price functions. Unfortunately, the pricing model is NP-hard for a large class of practical queries. They develop polynomial time algorithms for specific classes of conjunctive queries, chain queries, and cyclic queries. Subsequently, Koutris et al. [54] develop a prototype pricing system, Query-Market, based on the idea [53] . They formulate the pricing model as an integer linear program (ILP) with the objective to minimize the total cost of purchased views V p . The purchased views V p must satisfy the following requirements. For a tuple t in the query answer Q(D), there must exist a subset of views in V p that can produce t and for each relation R in Q, at lease one view on R should be purchased. For a tuple t not in Q(D), there must exist a subset of views in V p that can indicate t / ∈ Q(D). Although the pricing problem in the setting is in general NP-hard, QueryMarket shows that a large class of queries can be priced in practice, albeit for small data sets. To handle the case that a query Q may require databases from multiple sellers, they introduce a revenue sharing policy among sellers. Specifically, each seller gets a share of the query price π(Q), which is proportional to the maximum revenue that the seller can get among all minimum-cost solutions to the ILP. The problem of designing arbitrage-free pricing models for linear aggregation queries is studied by Li et al. [57] . Given a data set of n real values x = x 1 , . . . , x n , a linear query over x is a real-valued vector q = w 1 , . . . , w n , and the answer is q(x) = i=1 w i x i . The authors propose a marketplace, where a data buyer can purchase a single linear query q with a variance constraint v defined by the buyer. The query Q = (q, v) is answered by an unbiased estimator of q(x) with a variance smaller than or equal to v. The authors first develop a proposition that the pricing function π cannot decrease faster than 1  v , that is, π(q, v) = Ω( 1 v ). Then, they propose a family of arbitragefree pricing functions, π(q, v) = f 2 (q) v , where the function f (•) is semi-norm. Last, they provide a general framework to synthesize new arbitrage-free pricing functions from the existing ones. For any arbitrage-free pricing functions π 1 , . . . , π k , the pricing function π(Q) = f (π 1 (Q), . . . , π k (Q)) is also arbitrage- free if f (•) is a subadditive and nondecreasing function. A comprehensive list of celebrated arbitrage-free pricing functions are listed by Niu et al. [78] . In addition to synthesized pricing functions, Li et al. [57] also study a similar view-based pricing framework as Koutris et al. [53] do. By adapting the theoretical results in [53] , the authors show that the view-based pricing model for linear aggregation queries is NP-hard. Lin and Kifer [59] study arbitrage-free pricing for general data queries. They propose three pricing schemes, namely instance-independent pricing, upfront dependent pricing, and delayed pricing. The authors further summarize five forms of arbitrages, namely price-based arbitrage, separate account arbitrage, post-processing arbitrage, serendipitous arbitrage, and almost-certain arbitrage. The authors point out that the model by Koutris et al. [53] has pricing-based arbitrage, that is, the computed prices may leak information about D. Theoretically, they propose an instance-independent pricing function and a delayed pricing function that are arbitrage-free across all forms. The major idea is to tackle the pricing problem from a probabilistic view. Queries that are more likely to reveal the true database instance are priced higher. In the same vein, Deep and Koutris [24] characterize the structure of pricing functions with respect to information arbitrage and bundle arbitrage, where information arbitrage covers both post-processing arbitrage and serendipitous arbitrage defined by Lin and Kifer [59] . For both instance-independent pricing and answer-dependent pricing of a query, an arbitrage-free pricing function should be monotone and subadditive with respect to the amount of information revealed by asking the query. Several examples of arbitrage-free pricing functions are presented, including the weighted coverage function and the Shannon entropy function. Deep and Koutris [25] later implement the theoretical framework [24] into a real time pricing system, QIRANA, which computes the price of a query bundle Q from the view of uncertainty reduction. They assume that a buyer is facing a set of all possible database instances S with the same schema as the true database instance D. After receiving the query answer E = Q(D), the buyer can rule out some database instances D i ∈ S that cannot be D by checking whether Q(D i ) = E. A query bundle that eliminates more database instances is priced higher, as it reveals more information about D. The authors propose an arbitrage-free answer-dependent pricing function, which assigns a weight w i to each database D i ∈ S, and computes the price of a query bundle by π(Q) = i∈{i|Di∈S},Q(D) =Q(Di) w i . (3) By default, the same weight w i = P |S| is assigned to each possible database instance D i , where P is a parameter set by the data owner. The data owner can also provide QIRANA with some example query bundles and their corresponding prices. Then, QIRANA will automatically learn instance weights w i from the given examples by solving an entropy maximization problem. Choosing S to be the complete set of possible database instances leads to a #P -hard problem. To make the pricing function tractable, QIRANA uses a random sample of database instances as S. Chawla et al. [15] extend the pricing function in Equation 3 to maximize seller revenue. They consider the setting that the supply is unlimited and the buyers are single-minded, that is, a buyer only wants to buy a single query bundle Q. A buyer will purchase Q if the advertised price π(Q) is smaller than or equal to the buyer's valuation v Q . The authors take a training data set consisting of some query bundles and their customer valuations. Three pricing schemes are investigated. The major idea of the pricing schemes is that, according to Equation 3, a query can be priced as a bundle of items (database instances). Uniform bundle pricing sets the same price for all query bundles. Item pricing sets the price of a query bundle using Equation 3 , where the weights w i are learned from the training data. XOS pricing learns k weights w 1 i , . . . , w k i for each item D i and sets the price of Q as π(Q) = max k j=1 i∈{i|Di∈S},Q(D) =Q(Di) w j i . Theoretically, the approximation rate of each pricing scheme to the optimal revenue is studied. Although XOS pricing scheme enjoys the best approximation rate, the authors show that item pricing usually achieves larger revenue in practice. Miao et al. [69] study the problem of pricing selection-projection-natural join queries over incomplete databases. An arbitrage-free pricing function is proposed based on the idea of data provenance, which describes the origins of a piece of data and its processing history [10, 98] . Let t be a tuple in a query answer Q(D). The lineage L(t, D) of t is defined as the set of tuples in the database D that contribute to t. The authors assume that each tuple t has a base price p(t). The price of Q is set to the weighted aggregation of the costs of all tuples in M (Q, D) = ∪ t∈Q(D) L(t, D). Specifically, π U CA (Q) = i∈{i|ti∈M (Q,D)} µ i p(t i ) , where µ i is the percentage of attributes of t i that are not missing. The authors also propose an answer quality aware pricing function, π QU CA (Q) = ∆ n π U CA (Q)κ(Q, D) , where κ(Q, D) is the answer quality and ∆ is a constant. However, π QU CA is not arbitrage-free. Purchasing data is usually not a one-shot deal. A customer may purchase multiple queries from the same data seller. A history-aware pricing function will not charge the customer twice for already purchased information. Query-Market [54] tracks the purchased views of a customer and avoids charging those views when pricing future queries of the customer. Both [25] and [69] support history-aware pricing in the same vein as [54] . One drawback of these history-based approaches is that the seller must provide reliable storage to keep users' query history [101] . Upadhyaya et al. [101] propose an optimal history-aware pricing function, that is, a buyer is only charged once for purchased data. The key idea is to allow buyers to ask for refunds of already purchased data. In their setting, a query is priced according to its output size. The seller computes an identifier (coupon) for each tuple in the query answer Q(D). Both Q(D) and the corresponding coupons are sent to the buyer. If the buyer receives the same tuple t from two queries, the buyer can ask for a refund of t by presenting the two coupons associated with t in the two corresponding queries. To prevent buyers from borrowing coupons from others and receiving unconscionable refunds, each coupon is uniquely associated with a buyer. By tracking coupon status, the data seller guarantees that each coupon will be used only once. However, the pricing function has no arbitrage-free guarantee [25] . Privacy Compensation Machine learning models in many areas, like recommendation systems [19] and personalized medical treatments [66] , require a large amount of personal data. However, trading and sharing personal data may leak the privacy of data providers. Therefore, how to measure and properly compensate data providers for their privacy loss is an important concern in designing marketplaces of personal data. Differential privacy [28] is a mathematical framework rigorously providing privacy protection and plays an essential role in personal data pricing. Following the principle of differential privacy, random noises are injected into a data set, such that data buyers can learn useful information about the whole data set but cannot learn specifics accurately about an individual. The magnitude of random noise impacts data providers' privacy loss and the data price. A data set with less injected random noise may leak more privacy and is priced higher. Pricing models of personal data routinely adopt cost-plus pricing strategy, where sellers first compensate data providers for their privacy loss, and then scale up the total privacy compensation to determine the price for data buyers [78] . Ghosh and Roth [34] initiate the study of pricing privacy by auction. They propose a truthful marketplace to sell single counting queries on binary data. In their settings, a data seller has a data set consisting of personal data d i ∈ {0, 1} of individual i. The data seller sells an estimator s of the sum s = i d i and compensates data providers for their privacy loss. Under the framework of differential privacy, the authors treat privacy as a commodity to be traded. In particular, if a provider's data is used in an -differentially private manner, privacy units should be purchased from the provider. Thus, the privacy compensation problem can be transformed into variants of multi-unit reverse auction. The authors assume that each data provider i has a privacy cost function c i ( ) = v i * , (4) representing the cost for using the data in an -differentially private manner, where v i is the unit privacy cost of i. In an auction, data providers are asked to submit their asking prices b i for the use of their data. Ghosh and Roth [34] consider two situations. In the first situation, a buyer has an accuracy requirement on s, that is, Pr[| s -s| ≥ k] ≤ 1 3 . The authors establish an observation that they only need to purchase data from m individuals and use them in an -dfferential privacy manner, where m and only depend on the accuracy goal. It's shown that the classic Vickrey-Clarke-Groves auction minimizes the buyer's payment and guarantees the accuracy goal. The major idea is to select m individuals with the cheapest bids and provide each winner with a uniform compensation •b, where b is the (m+1)-th smallest bid. In the second situation, a buyer has a budget constraint and wants to maximize the accuracy of ŝ. The authors propose a greedy-based approximation algorithm to solve the problem. The value of personal data and privacy valuation may be correlated. For example, a patient may assign a higher price to the patient's medical report than the healthy people ask for. Ghosh and Roth [34] show a negative result that in the situations having such correlations, no individually rational direct mechanism can protect privacy. In a follow-up study, Dandekar et al. [19] consider the scenario of selling linear aggregate queries q = w 1 , . . . , w n over real-valued personal data D = d 1 , . . . , d n . They assume data providers have the same privacy cost function as Equation 4 , and propose a truthful reverse auction mechanism to maximize the accuracy of estimators for budget-constraint buyers. The error of an estimator s of the true answer s = i w i d i is its squared error ( s -s) 2 . It is shown that an s computed from more providers with large corresponding weights in q is more accurate. Therefore, the problem is transformed into a knapsack reverse auction [95] that maximizes the total weights of the selected providers under budget constraints. Specifically, the authors treat the budget as the capacity of the knapsack, the privacy cost of a data entry d i as its weight in the knapsack, and w i as the value of d i . A greedy-based algorithm with an approximation ratio of 5 is proposed to solve the problem. The aforementioned studies [34, 19] assume that data buyers can purchase an arbitrary amount of privacy from each data provider. However, a conservative individual may not want to sell the individual's data if the privacy loss is too large. Nget et al. [77] study the same problem as Dandekar et al. [19] do in a more realistic situation, that is, an individual i can refuse to participate in an estimator if the privacy loss of i is larger than a threshold i . They assume that the privacy cost function of each data provider is public and propose a heuristic method to determine query price. The model first randomly samples a subset of data providers. Then, it uses the data from each sampled individual i in an i -differentially private manner, and computes the compensations correspondingly. If the total compensation is larger than the budget, the model decreases the differential privacy levels of the high cost providers, such that the budget goal is met. Last, they generate the perturbed query answers by personalized differential privacy [50] , which guarantees the differential privacy for each selected individual i. They repeat the above steps several times and return the perturbed answer with the smallest squared error. Later, Zhang et al. [111] propose a truthful personal data marketplace, where each data provider i can specify the personal maximum tolerable privacy loss i . They first show that the accuracy of query answers is proportional to the total amount of purchased privacy. Under the assumption that the distributions of privacy costs of all individuals are public, they design a variant of Bayesian optimal knapsack procurement [29] , which maximizes the expected total purchased privacy under the constraint of a data buyer's expected budget. The authors solve the problem by adopting the algorithm in [29] . The noisy query answer is generated using personalized differential privacy [50] , which guarantees i -differential privacy for each selected individual i. The models proposed by Dandekar et al. [19] , Ghosh and Roth [34] may be attacked by arbitrage. Li et al. [57] consider the situation where a data buyer has a variance constraint v on the purchased noisy query answers. They assume that the privacy costs of individuals are public, and propose a theoretical framework for assigning arbitrage-free prices to linear aggregate queries q. A perturbed answer is generated from the true answer by adding Laplace noise with the expectation 0 and variance v 2 . Measured by differential privacy, the privacy loss of an individual i is upper-bounded by = w √ v 2 if the individual is involved in the query, and 0 otherwise, where w is the largest absolute weight in q. Several privacy compensation functions are proposed, such as p i ( ) = c i , where c i is the unit privacy cost of individual i. The price of a query is the sum of the privacy compensations, which is proved to be arbitrage-free. Li et al. [57] only compensate individuals involved in queries. However, as two individuals' data may be correlated, the privacy of a not-involved individual may be leaked due to the revelation of the other individual's data. To fairly compensate individuals for their privacy, Niu et al. [78] extend the model by Li et al. [57] , and propose a pricing model that is arbitrage-free and dependency fair. Dependent fairness requires that a data provider should receive a privacy compensation as long as some data of other providers that is correlated to the data of this provider is involved in a query. Employing dependent differential privacy [60] , the privacy loss of a data provider i caused by a query is upper-bounded by i = dsi √ v 2 , where ds i is the dependent sensitivity of the query at provider i's data. The authors propose a bottom-up mechanism and a top-down mechanism to determine privacy compensations and query prices. The bottom-up mechanism computes compensations in the same way as Li et al. [57] do and determines query prices as a multiple of the total compensations. The top-down mechanism first determines the query price using a user-defined arbitrage-free pricing function and spares some fraction of a buyer's payment for privacy compensation. Each data provider receives a division of the compensation proportional to the provider's privacy loss. All of the privacy compensation methods discussed above assume a trustworthy platform/agent to trade data providers' privacy with data buyers. Data providers, however, cannot control the usage of their own data. In this concern, Jin et al. [49] develop a truthful crowdsensing marketplace, where data owners can determine how much privacy to disclose. In their marketplace, obfuscated geo-locations of data owners are traded by auctions. Data owners first inject random noise to their data based on their own privacy preferences. Then, each data owner bids with the cost as well as the mean and variance of the injected random noise. The buyer determines auction winners to maximize data accuracy with respect to the buyer's budget constraint. The authors show that the optimization problem is NP-hard and develop a greedy heuristic solution. The major idea is to iteratively select data owners that bring the largest marginal utility contributions until the budget is used up. In this section, we review representative pricing models of raw data sets in four types of scenarios, where different desiderata are considered. A limitation of the discussed pricing models is that data sets are priced without considering their down-stream applications. Fernandez et al. [30] argue that the value of a data set to customers is usually task dependent and cannot be evaluated by the intrinsic properties of the data set alone. As the pricing models of raw data sets are agnostic to the down-stream applications of raw data sets, these pricing models can be used in machine learning pipelines of building both supervised and unsupervised machine learning models. Pricing Data Labels Crowdsourcing is a popular method for collecting large-scale labeled training data for machine learning tasks [88] . Unfortunately, crowdsourced data often suffers from quality issues. This is mainly due to the existence of lazy and spamming workers, who submit low quality labels. Those workers can be discouraged from participating in the tasks by rewarding them with a performance-based payment [82] . However, due to a lack of ground-truth verification of the collected labels, how to evaluate label quality and price the labels correspondingly is a challenging task. In this section, we review two types of label pricing models, which are designed to motivate workers to exert efforts and submit accurate data labels. Gold Task-based Pricing Models A gold task is one for which the answer is known to the data buyer a priori. Gold tasks can be uniformly mixed at random within the tasks for workers to evaluate workers' performance, which determines the payments to workers. Since workers cannot distinguish gold tasks from others, this strategy can motivate workers to provide accurate labels. Shah and Zhou [88] consider a crowdsourcing setup where workers perform binary labeling tasks. The authors propose a multiplicative pricing model using gold tasks. The model allows a worker to skip an assigned task if the worker is not confident about the answer. The total payment to a worker u is computed based on u's performance on the answered tasks. The workers are selfish and want to maximize their individual expected payments. The authors assume that each worker has a private belief Pr(y t = l) about how likely the true label y t of a task t is l. The pricing model is designed to incentivize workers to only report high-confidence labels with beliefs greater than a threshold p. The total reward starts at β. For each correct answer in the gold tasks, the reward will be multiplied by 1  p . However, if any of these gold tasks are answered incorrectly, the reward will drop to zero, that is, π(u) = β • 1 p c • 1(r = 0), (5) where 1(•) is an indicator function, and c and r are the number of correct and wrong answers, respectively. This pricing model motivates workers to only answer tasks that they are sufficiently confident about. The pricing model is incentive compatible, that is, a worker receives the maximum expected payment if and only if the worker exerts efforts to report accurate labels. The pricing model also satisfies the \"no-free-lunch\" axiom, that is, workers who only provide wrong answers will receive no payments. In their setting, the proposed method is the unique incentive compatible model that satisfies the \"no-free-lunch\" axiom. Shah et al. [90] further generalize the model [88] to multi-label tasks. For each task, a worker can submit multiple answers Y that the worker believes is most likely to be correct. This multi-selection system provides workers more flexibility to express their beliefs, which can use the expertise of workers with partial knowledge more effectively than single-selection systems. The authors assume that the workers' beliefs for any label being the true label for a task lie in the set {0} ∪ (p, 1], where p is fixed and known. The authors want to encourage workers to only report the set of labels with positive beliefs. The reward of a worker for a gold task is (1-p) (| Y |-1) if one of the worker's answers is correct and 0 if otherwise. The total payment to a worker is determined by the product of the worker's rewards on all gold tasks. In a later study, Shah and Zhou [89] propose a two-stage multiplicative pricing model to motivate workers to self-correct their answers. In the first stage, a worker answers the assigned tasks. In the second stage, if the worker's answer to a task t does not agree with the answer from the peer workers, the worker has an opportunity to change the answer. The worker u receives a high reward for a gold task t if the initial answer to the task is correct, a low reward if the updated answer is correct, and 0 reward if the final answer is wrong. The total payment is determined by the product of the worker's rewards from gold tasks. Theoretically, the authors prove that the proposed method is the unique incentive compatible model that satisfies the no-freelunch axiom. Empirically, they show in a simulation that the self-correction setting can significantly improve the data quality compared to the standard single-stage settings. To reduce the variance in payoffs, the aforementioned methods [89, 90, 88 ] require each worker to solve a sufficient number of gold tasks. This leads to a waste of procurement budget, as the answers to the gold tasks are already known. de Alfaro et al. [2] address the limitation by combining the ideas from peer prediction and gold tasks. They arrange the workers in a hierarchy, where every worker shares one common task with each of its children. A few gold tasks are used to incentivize high efforts from the workers at the top level of the hierarchy. Assuming these workers exert sufficient efforts to provide high quality answers, their answers can be used as pseudo gold tasks for workers in the second layer, who can in turn provide pseudo gold tasks for the next level, and so forth. A worker will be punished if the worker does not agree with the parent on the task shared between them. As the workers at the top level are evaluated by the true gold tasks, they are evaluated more accurately than the other workers, which is not fair to workers at lower layers. The follow-up work by Goel and Faltings [36] considers fair payment among workers, that is, the expected reward of a worker is directly proportional to the accuracy of the worker's answers and independent of the strategy and proficiency of the worker's random peers. The key idea is to estimate the proficiency of workers, which is the probability that a worker can solve the tasks correctly. Goel and Faltings [36] start by estimating the proficiency of a small group of workers with gold tasks. Then, the answers by the small group of workers to non-gold tasks are used as contributed gold tasks, where the workers' proficiencies are used as the trustworthy degree of those tasks. The contributed gold tasks are used to estimate the proficiency of more workers. Finally, the payoff of each worker is proportional to the worker's estimated proficiency, such that workers with good proficiency receive high payments. The model guarantees that exerting high efforts to provide accurate labels is a dominant strategy for each worker. Peer Prediction-based Pricing Models Peer prediction-based pricing model can incentivize efforts and accurate data labels without access to gold tasks. Those models take advantage of the stochastic correlation of answers to the same tasks, and set up a game among workers, called a mechanism in game theory. The game is designed such that workers who exert effort in solving the tasks can achieve high expected rewards, whereas spammers providing random answers on average receive no payments. A pricing model is incentive compatible if it admits exerting high efforts and truthful reporting as an equilibrium. Dasgupta and Ghosh [20] initiate the study of effort elicitation and propose the DG model to price binary labels. A data buyer assigns a set of data labeling tasks to a group of workers, such that each task is labeled by multiple workers and each worker labels multiple tasks. They assume that a worker u i either invests no effort and thus provides a random label, or invests full effort with a cost c i and provides a true label with probability p i . Here, p i is called the proficiency of u i . The workers are self-interested, who want to maximize their payoffs. The DG model pays a worker u i on an assigned task t based on how surprisingly u i 's report is consistent with that of the peer worker u p . Denote by y and y p the answers from u i and u p to a task, respectively. The model pays u i with a constant reward subtracting the probability Pr(u i , u p ) that u i and u p have the same answer to a random task, that is, π(u i , t) = β • (1( y = y p ) -Pr(u i , u p )), ( 6 ) where β is a non-negative payment scaling parameter that is chosen to cover workers' effort costs, and Pr(u i , u p ) is approximated from the submitted labels. The total payment to a worker u i is the sum of u i 's payment for each task. The pricing model incentivizes efforts, as the expected payment for spammers who do not solve their tasks and report random/constant labels is exactly zero. Under the assumption that the proficiency of all workers are better than random guess, it is shown that the DG model is incentive compatible. Even though the pricing model also has non-informive equilibria, such as all workers reporting the same label, those equilibria are less profitable to the workers, and thus are not attractive to the workers. In a multi-label situation, two labels l 1 and l 2 may be positively correlated. Shnayder et al. [92] show that under the DG model [20] , workers can achieve more profits by misreporting l 1 by l 2 . The correlated agreement (CA) mechanism [92] extends the DG model to multi-label tasks. In the CA mechanism, knowledge about label correlation is required. A label correlation matrix ∆ is learned from workers' submissions, where an element ∆ i,j = Pr(l i , l j ) -Pr(l i )Pr(l j ) is the correlation degree between labels l i and l j . Denote by S(•) the sign function of ∆, that is, S(l i , l j ) = 1 if ∆ i,j > 0, and 0 otherwise. A worker u will be rewarded for a task t if u's report is positively correlated with that of peer u p . To penalize the case where all workers blindly report the same label, a worker u will be penalized if u is likely to be consistent with worker u p on random tasks. In particular, the payment to worker u for reporting ŷ is π(u, t) = β • (S( y, y p ) -S( y a , y b )), where ŷp is the answer to task t by worker u p , y a is the answer to a random task by worker u, and y b is the answer to another random task by worker u p . When the number of tasks is large, such that label correlations ∆ can be accurately learned, the CA mechanism is incentive compatible with the highest payment. However, the mechanism fails if two labels l 1 and l 2 are not distinguishable with respect to S(•), that is, ∀l i ∈ Y , S(l 1 , l i ) = S(l 2 , l i ). In this situation, workers may misreport l 1 by l 2 and still receive the same payoffs. Radanovic et al. [82] provide complementary theoretical results on pricing multi-label tasks. They assume that the labels only have limited correlations, that is, Pr(o p = l 2 |o = l 1 ) < Pr(o p = l 2 |o = l 2 ), where o and o p are the observed labels of worker u and worker u p , respectively. The mechanism pays the report y by worker u on a task t by π(u, t) = 1( y = y p ) R( y) -1, where R( y) is the empirical frequency of y, which is computed from all submissions. It is shown that exerting high efforts and truthful reporting is strictly more profitable than any other equilibria. However, their assumptions on label correlations may not hold in some applications [92] . The aforementioned methods [20, 92, 82] require that each task must be completed by at least two workers, which leads to duplicate answers, and thus does not use the crowd efficiently. For a setting with binary labels, Liu and Chen [62] propose to learn a classifier M from workers' reports, and use the classifier's predictions M(t) as peer reports. Since workers' submitted labels are noisy, the classifier is trained by the techniques of learning with noisy labels [75] . Specifically, they first estimate the error rates of submitted labels. Then, the classifier is optimized by an error rate calibrated loss function ϕ(•) proposed by Natarajan et al. [75] . A report y to a task t is priced based on -ϕ(M(t), y), such that labels with large loss are priced lower. Under the assumption that M is better than random guess, exerting efforts to find the truth labels is the highest-paying equilibrium. Liu and Chen [63] study the problem of sequential label collection, where labeling tasks are published in multiple rounds. In their settings, an accurately labeled task has a fixed reward to a data buyer, whereas a mistakenly labeled task has no value to a data buyer. They propose an incentive compatible pricing model that maximizes the expected utility for a data buyer, which is the difference between the total rewards and the total payment. They develop a multi-armed bandit algorithm to extend the DG model [20] , which dynamically adjusts the parameter β in Equation 6 . A larger β encourages more accurate labels but costs more money. As the bandit algorithm requires a static environment, this method may fail to learn the optimal β if adversarial workers adjust their strategies according to their interactions with the mechanism [42, 37] . Hu et al. [42] solve the problem by reinforcement learning, which is more robust to strategic behaviors of workers. In practice, peer prediction-based models need to adjust payments to avoid negative payments. The adjustment may lead to an issue that spammers may receive positive and high rewards. Radanovic and Faltings [81] address the issue by proposing a reputation system PropeRBoost to adjust the payments. PropeRBoost publishes tasks to workers in multiple rounds, and computes a reputation score for each worker based on the worker's past submissions. In each round r, it first applies the DG model [20] to compute workers' payments, and then re-scales the payments by the reputations of the corresponding workers. It is shown that the average payment of a spammer converges to 0 as r approaches infinity. In this section, we review gold task-based and peer prediction-based pricing models for data labels. The developed pricing models guarantee that exerting efforts to report accurate data labels is the most profitable strategy of all workers. A major concern of gold task-based methods is that these methods require a sufficient number of gold tasks to obtain good performance. In some scenarios, however, gold tasks are very expensive to obtain. For peer prediction-based methods, the existence of multiple equilibria is a major limitation, as workers may converge to an uninformative equilibrium, where workers do not exert full efforts [93] . Pricing in Collaborative Training of Machine Learning Models Collaborative machine learning is an appealing paradigm where multiple data owners collaboratively build high-quality machine learning models by contributing their data. As the data sets from different data owners may have different contributions to the trained machine learning models, data owners who contribute more valuable data should receive more rewards [94] . In this section, we review contribution evaluation and revenue allocation techniques in collaborative machine learning. Revenue Allocation by Shapley Value Shapley fairness is widely adopted as the foundation of fair revenue allocation in collaborative machine learning. It guarantees that each participant receives a payment proportional to the participant's marginal contribution to the performance of the trained machine learning model. The challenge in adopting Shapley value lies in its exponential computational cost. Maleki et al. [67] tackle the efficiency issue of Shapley value by proposing a permutation sampling algorithm for bounded utility functions. By Equation 2, the Shapley value of a seller is the marginal utility contribution averaged over all possible subsets of sellers, which can be estimated by sample mean. Denote by ψ(s) an ( , δ)-approximator of a seller's Shapley value, that is, Pr(| ψ(s) -ψ(s)| ≤ ) ≥ 1 -δ. To compute the estimators for all sellers, by Hoeffding's inequality [40] , we need O( 2r 2 N 2 log 2N δ ) samples and evaluate the utility function O(N 2 log N ) times, where N is the number of sellers and r is the range of the utility function. Evaluating the utility function itself, such as computing testing accuracy, is computationally expensive, as it requires training a machine learning model. Therefore, the method is not scalable to a large number of sellers. Ghorbani and Zou [33] extend the Monte-Carlo method by Maleki et al. [67] to price individual data point in supervised learning, and propose truncatedbased and gradient-based approximation methods. Their truncated-based method reduces the number of utility evaluations by ignoring coalitions of large size. The authors argue that it is sufficient to estimate Shapley values up to the intrinsic noise in the prediction performance U on the test data set, which can be measured as the bootstrap variance of U. In addition, the performance change by adding one more training data point s to a large training data set S is ignorably small. Therefore, if the utility of S is close to the utility of the whole data set D, the marginal contribution of s to S can be regarded as 0 in practice, and thus its computation can be truncated. Their gradient-based method speeds up the evaluation of utility functions by reducing training time, where a model is trained with only one pass through the training data. They update the model by performing gradient descent on one data point s at a time and the marginal contribution of s is the change in the model performance. The two approximation methods introduce estimation bias into the approximated Shapley values, and have no guarantees on the approximation error. Jia et al. [46] propose two approximation algorithms with provable error bounds for Shapley value that significantly reduce the number of utility evaluations. The first algorithm adopts the idea of group testing in feature selection [114] . Denote by β i a Boolean random variable indicating whether a seller s i is in a random sample of sellers. A sampling distribution of β 1 , . . . , β N is designed such that the difference in Shapley values between a seller s i and a seller s j is ψ(s i ) -ψ(s j ) = 1 N -1 S⊆D\\{si,sj } U(S ∪ {s i }) -U(S ∪ {s j }) N -2 |S| = E[(β i -β j )U(β 1 , . . . , β N )], where U(β 1 , . . . , β N ) is the utility evaluated on the appearing sellers and D are all sellers. The Shapley value of sellers can be derived from the estimated Shapley differences between all datum pairs by solving a feasibility problem. They demonstrate that the algorithm returns an ( , δ)-approximation with O(N (logN ) 2 ) utility evaluations. The second algorithm is based on their observation that Shapley values are approximately sparse, that is, most values are around the mean. Exploiting this property, they apply the idea of sparse signal recovering in compressive sensing [83] , and develop an algorithm that produces an ( , δ)-approximation with only O(N log(log(N ))) utility evaluations. Jia et al. [45] further discover that Shapley values for data points used in unweighted kNN classifiers can be computed exactly only in O(N log N ) time. Given a testing point x test with label y test , they define the utility of a kNN classifier as the likelihood of y test , that is, U(S) = 1 k min(k,|S|) i=1 1(y αi(S) = y test ), where α i (S) is the index of the training data that is the i-th closest to x test in the set of data points S. The special utility function enables efficient computation of Shapley differences between two data points x αi(S) and x αi+1(S) , that is, ψ(x αi(S) ) -ψ(x αi+1(S) ) = 1(y αi(S) = y test ) -1(y αi+1(S) = y test ) k min(i, k) i . (7) They start by computing ψ(x α N (S) ) = 1(y α N (S) =ytest) N and then exploiting Equation 7 to recursively compute the Shapley values in the order of x α N (S) , . . . , x α1(S) . They further develop an ( , δ)-approximation algorithm based on Locality Sensitive Hashing [21] with only sublinear complexity. The major idea is to only compute Shapley values for the retrieved k * = max(k, 1 ) nearest neighbors of x test and ignore the rest data points, as their Shapley values are too small. Moreover, they present a Monte-Carlo approximation algorithm with O( N 2 log(k) log( k δ )) time complexity for weighted kNN classifiers. The aforementioned studies [45, 46, 33] evaluate the utility of a model by its performance on a validation data set. Sim et al. [94] consider the situation where no validation data sets are available, and propose to use information gain on model parameters as the utility function. Denote by θ the model parameters. After training on data D, the information gain IG(θ) = H(θ) -H(θ|D) is the reduction in the uncertainty of θ, where H(•) is the entropy function. In addition to Shapley fairness, three additional incentive conditions for revenue allocation are proposed, namely individual rationality, stability of the grand coalition, and group welfare. They also present p-Shapley fairness, which assigns a reward π(s i ) = kψ(s i ) p to a seller s i . By tuning parameter p ∈ [0, 1], they can trade off between achieving different incentive conditions. Rather than monetary incentives, each participant receives a machine learning model as a reward. To realize different levels of rewards, the models are trained by injecting different levels of noise into training labels. Federated Learning [7, 68] enables multiple decentralized participants to collaboratively train a machine learning model while keeping their training data locally. The data sets contributed by the participants are used in a sequential order determined by a central server. Evaluating participants' contributions using Shapley value incurs high communication costs among the decentralized participants. Moreover, Shapley value neglects the order of data sources. To accommodate the challenges, Wang et al. [103] propose federated Shapley value. Denote by U(s i + s j ) the utility of the model, which is trained on s i 's data first, then on s j 's data. Let I t be the set of selected participants in round t of the federated learning process. The federated Shapley value of participant s i at round t is defined as follows. ψ t (s i ) =    1 |It| S⊆It\\{si} U (I1:t-1+(S∪{si}))-U (I1:t-1+S) ( |I t |-1 |S| ) if s i ∈ I t 0 if s i / ∈ I t (8) The federated Shapley value of s i is ψ(s i ) = T t=1 ψ(s i ), where T is the total rounds in federated learning. The authors show that federated Shapley values satisfy the balance and additivity axioms of Shapley fairness. The other two axioms, symmetry and zero element, are satisfied in each round. They extend the permutation sampling and group testing approximation methods [46] to compute federated Shapley values. Participants in federated learning spend some costs for contributing their data sets, such as privacy cost [41] and energy costs [51] . Yu et al. [108] propose a fair revenue allocation mechanism for federated learning that jointly considers the costs and contributions of participants. At round t, each participant s i has a public cost c i (t) and receives a reward π i (t). The regret r i (t) of s i is a function of the difference between the total cost and total reward of s i . A large value of r i (t) indicates that s i is not well compensated for the costs incurred to s i . The authors argue that payments of participants at each round should achieve contribution fairness and regret fairness. Contribution fairness requires that the payment π i (t) and the Shapley value ψ t (s i ) of each participant s i should be positively correlated, that is, i π i (t)ψ t (s i ) should be maximized. Regret fairness requires that the participants should have similar regrets, that is, the difference of the regrets among participants should be minimized. The payments of participants are determined by solving an optimization problem with respect to a budget constraint. Theoretically, they show that the time-averaged regret of participants is upper-bounded by a constant value as t → ∞. Shapley value is vulnerable to data-replication attacks. A data provider may replicate his/her data with zero cost and acts as an additional provider to get extra unconscionable rewards. Agarwal et al. [1] address the issue by penalizing similar data sets to disincentivize replication, that is, the replicationrobust Shapley value is defined as ψ r (s i ) = ψ(s i )e -λ s j ∈D\\{s i } SM(si,sj ) , where SM is a similarity metric and λ is a constant. However, the proposed replication-robust Shapley value no longer satisfies the balance axiom in Shapley fairness. Han et al. [38] study the replication attack in data markets with submodular utility functions. They show that the total reward received by an attacker increases monotonically with respect to the number of the attacker's replications. They discover that the extra reward to the attacker mainly comes from the marginal contributions to small seller groups by the attacker's replication. To fix the issue, the authors propose to down-weigh those contributions when computing Shapley values. Their method guarantees that attackers receive smaller rewards with more replications. Ohrimenko et al. [79] design a replication robust collaborative data market, where each participant is asked to pay a participation fee. This method discourages replication, as the extra reward received by an attacker cannot cover the attacker's participation cost. Other Revenue Allocation Methods There are some other revenue allocation methods in collaborative machine learning other than Shapley value. Leave-one-out [18] is a commonly used method to evaluate data importance. It compares the performance of a model trained on the full data set with the performance trained on the full set minus one point. The performance drop is defined as the value of the data point, that is, π(s i ) = U(D) -U(D \\ {s i }). Leave-one-out is often approximated by influence function [18, 52] , which measures how the model changes as the weight of a training point is changed without retraining the model. Richardson et al. [85] apply an influence function to reward participants in federated learning for their contributed data points. It is shown that the pricing model is incentive compatible. Applying influence functions to price data points are also investigated in [84, 46] . Comparing with Shapley value, leave-one-out methods, in general, are more efficient as they do not require model retraining. However, leave-one-out methods may not accurately assess the values of data points. The methods may assign a low value to one of the two exactly equivalent data points, regardless of how important the datum is, as high performance may still be achieved by including the other datum [106] . Yan and Procaccia [104] design a data pricing model based on core [35] , which is a celebrated revenue allocation solution in cooperative game theory. The solution seeks to achieve maximum stability of how participants team up with each other. Core requires that the total reward of each coalition S should be at least equal to the utility U(S), that is, ∀S ⊆ D, si∈S π(s i ) ≥ U(S), where π(s i ) is the reward of participant s i and D is the set of all participants. When such a reward cannot be achieved, least core relaxes the constraints by allowing a minimum difference between the utility of S and the total reward of S. In particular, least core computes the payment to each participant by solving the following linear program. The number of constraints in Equation 9 grows exponentially with respect to the number of participants. Yan and Procaccia [104] tackle the efficiency issue by proposing a Monte Carlo approximation algorithm with guaranteed approximation errors. Their approximation method samples a relatively small number of coalitions and solves Equation 9 on the sampled coalitions. If Equation 9 has multiple solutions, the solution with the smallest l 2 -norm is chosen. Their revenue allocation satisfies the balance, symmetry, and zero element axioms of Shapley fairness. Yoon et al. [106] propose a reinforcement learning algorithm to value data points. They learn a data value estimator that estimates data values and selects the most valuable samples to train a target classifier. They jointly learn the data value estimator and the corresponding classifier, which enables the classifier and the data value estimator to improve the performance of each other. However, this method cannot guarantee fair revenue distribution among participants. Most of the existing revenue allocation methods are developed in the settings that supervised machine learning models are jointly trained. The participants are rewarded based on the contributions of their data sets to the utility of the jointly trained machine learning model. To adapt existing pricing models to scenarios where unsupervised machine learning models are jointly trained, the major challenge is to develop a utility function that participants can all agree on. For some traditional unsupervised machine learning models, there are some widely accepted performance metrics that can serve as the utility functions. For example, Silhouette Coefficient [86] and Calinski-Harabasz index [12] are widely used to evaluate the performance of clustering algorithms when groundtruth clusters are unknown. However, developing a utility function for some unsupervised models, such as pre-trained deep language models [26, 9] , may be challenging, as they are evaluated differently in many down-stream machine learning tasks. In this section, we review pricing models in collaborative training of machine learning models. The major idea is to price each participant's data set based on its contribution to the performance of the jointly trained machine learning model. Shapley value-based methods guarantee fair revenue distribution among participants, but suffer from poor computational efficiency and scalability. Some alternative methods [106, 104] enjoy better efficiency or coalition stability, but lose fairness guarantee. Pricing Machine Learning Models Machine learning models are needed in many different applications and scenarios. Rather than building machine learning models from scratch, many users and companies turn to purchase well-trained machine learning models, due to their lack of expertise and computation resources [109, 16] . In this section, we review pricing models for machine learning models and discuss the differences between pricing machine learning models and raw data sets. Pricing Models Pricing machine learning models is an emerging research area. To the best of our knowledge, the existing studies mainly focus on arbitrage-free and revenue maximization pricing. Chen et al. [16] propose an arbitrage-free and revenue maximization machine learning model marketplace. In their setting, a model owner sells multiple versions of a machine learning model to different buyers. The seller first trains an optimal model on the whole raw data set. Then, the seller produces different versions of the optimal model by adding Gaussian noises with different variances to the parameters of the optimal model. The expected error rates of the generated model instances are monotonically increasing with respect to the variance of the injected noise. An arbitrage-free pricing function guarantees that a buyer cannot derive a high performance model by paying less. Under their mechanism, a pricing function is arbitrage-free if and only if the function is monotone and subadditive with respect to the inverse of the noise variance. Unfortunately, their pricing model only works for machine learning models trained with strictly convex objective functions. Chen et al. [16] further study revenue maximization in pricing machine learning models with respect to the demands and valuations of a set of buyers. They show that determining the optimal prices is coNP-hard. To overcome the computational hardness, they relax the subadditive constraints π(x + y) ≤ π(x) + π(y) by π(x) x ≤ π(y) y , where x ≤ y and π is an approximation of the optimal pricing function π. They show that π is arbitrage-free and ∀x > 0, π(x)/2 ≤ π(x) ≤ π(x). They propose a dynamic programming algorithm to compute π in O(n 2 ) time, where n is the number of model versions. Liu et al. [61] present an end-to-end model marketplace, which jointly considers data owners' privacy costs and model buyers' demands. A broker collects data from data owners, and produces multiple versions of a machine learning model for sale with different subsets of training data and different differential privacy levels . The revenues are fully distributed to data owners. Objective perturbation [14] is used to train models with required differential privacy levels, which injects quantified random noise into the objective function of a model. Each data owner s i requests a minimum compensation for using the owner's data to train a model with -differential privacy, that is π(s i , ) = b i • c i ( ), where b i is proportional to the Shapley value of s i with regard to all sellers' data sets and c i ( ) is the privacy cost of s i . A desirable pricing model should guarantee revenue maximization, arbitrage-freeness with respect to differential privacy levels, and covers the compensations to data owners. Computing the optimal pricing function is coNP-hard, and thus they propose a dynamic programming algorithm to solve the problem approximately. A limitation of the pricing model is that it cannot adjust prices with respect to dynamic customer demands, which may limit the broker's revenue. Agarwal et al. [1] consider an online auction for machine learning model market, which is truthful and revenue maximizing. They assume buyers come one at a time, and each wants to purchase a machine learning model for the buyer's prediction task. Denote by G( Y i , Y i ) the quality of a model's prediction Y i on buyer i's validation data set Y i . The reward that buyer i receives from the model is µ i • G( Y i , Y i ), where µ i is buyer i's private valuation on unit performance. Denote by p i and b i , respectively, the asking price of the broker and the bid of buyer i for unit performance. The broker produces a noisy machine learning model for buyer i based on the price difference p i -b i . Specifically, the model is trained on a data set with quantified injected random noise, such that the model's performance is degraded proportionally to p i -b i . Buyer i is charged by a function RF (p i , b i , Y i ), which is designed following Myerson's payment function rule [71] . The utility that buyer i receives by bidding b i is U(b i ) = µ i • G( Y i , Y i ) -RF (p i , b i , Y i ), where Y i is the prediction of the returned noisy model. It is shown that truthfully bidding the buyer's valuation µ i can maximize buyer i's utility. The authors apply a Multiplicative Weights method [3] to compute the price p i from historical revenues. They show that the pricing mechanism achieves maximum revenue. Pricing Raw Data Products Versus Machine Learning Models At a high level, pricing machine learning models and raw data sets share a series of common desiderata and techniques. But their pricing models are essentially different from each other on at least four aspects. First, the pricing units of machine learning models are often well defined and fixed. A machine learning model is usually priced and sold as a whole. Customers can purchase either a machine learning model or the usage of a machine learning model via API calls, where each call has a fixed price. In contrast, a raw data set can be consumed in multiple granularities. For example, a customer may be interested in the sales information of American customers in the last year. Another customer, however, may want to purchase the sales information during the Christmas season. Such flexibility makes it easier to version raw data products, and enables more flexible pricing mechanisms. For example, according to how much information is revealed, different prices can be assigned to different queries on the same database [25] . Second, versioning in model markets is harder than that in data markets. As data sets have strong and flexible aggregateability, different versions of a data set can be easily produced by aggregating along different dimensions. Producing different versions of a machine learning model requires more sophisticated techniques [16] , since it is challenging to accurately control the differences between multiple versions. Third, the value of raw data sets to customers is generally harder to measure than that of machine learning models. Often, raw data sets are used to train machine learning models. The ultimate value of a data set dependents not only on its intrinsic properties but also on the specific task that the data set is used for and the analyzing methods [30] . Therefore, it is usually hard for customers to understand the value of a data set. Many machine learning models are designed for specific tasks and are directly used by people to support decision making [1] . It is easier for people to verify and understand the value of such machine learning models. For example, customers can value a classification model based on its prediction accuracy. Last, preventing arbitrage is usually harder in model market than in raw data market. As shown by Tramèr et al. [100] , Yu et al. [109] , machine learning models may be stolen by adversaries via a reasonable number of API calls. A customer with a large number of query instances may first purchase some predictions from a target machine learning model. Then, the customer can train a local model with near-equivalent outputs as the target model and use the local model to predict the remaining query instances with almost no cost. In this section, we review pricing machine learning models. We first revisit arbitrage-free and revenue maximization pricing models. Then, we discuss several major differences between machine learning model products and raw data set products, including pricing units, versioning, arbitrage prevention, and customer valuation. Conclusions and Future Directions In this paper, we survey data pricing in end-to-end machine learning pipelines. We consider three important steps in machine learning pipelines where pricing may be substantially involved, namely raw data collection and labeling, collaborative training machine learning models, and machine learning model marketplaces. We systematically review representative studies in those steps, discuss the pricing principles and review the existing methods. End-to-end machine learning pipelines are playing a more and more important role in the current big data and AI economics era. To the best of our knowledge, this is the first survey on data pricing in machine learning pipelines. Data pricing is still in its early stage. There are many research challenges for future works. We list some of them here. First, the existing studies focus on designing proper rewarding models in each separate stage of machine learning pipelines. There is a lack of systematic study of an end-to-end revenue allocation solution. As presented in our survey, the manufacturing process of machine learning models involves multiple parties, including data owners, data processors, machine learning model designers, and other possible participants. Each party provides value-added contributions at one stage of the pipeline and receives a reward. A natural question is how to allocate manufacturing budgets among different parties. To answer the question, we need a mechanism to measure and compare the contributions of different parties in different stages. We also need a system that can dynamically adjust the budget allocations in response to the changes in supply and demand. Second, almost all pricing models of collaborative model training formulate revenue allocation as a cooperative game, and use Shapley value to carry out the allocation. They justify the usage of Shapley value through the four axioms, namely balance, symmetry, zero element, and additivity. However, Yan and Procaccia [104] argue that the necessity of additivity for data valuation is debatable. Except for the additivity axiom, many other celebrated allocation solutions in cooperative game theory can also satisfy the other three axioms. Comparing with Shapley value, the other solutions have their advantages and limitations. For example, normalized Banzhaf value [13] computes the payment to each player as the player's average marginal contribution towards all coalitions of other players. Even though normalized Banzhaf value does not satisfy the additivity axiom, it is more robust to data replication attacks than Shapley value [38] . In a marketplace where robustness is more important than additivity, normalized Banzhaf value is more preferable than Shapley value. Different types of data marketplaces may have different goals [30] , and thus require different axioms. Therefore, we need a better understanding about the necessary axioms in different marketplaces and explore revenue allocation solutions in specific marketplaces. Third, fine-grained data procurement for machine learning tasks is not fully explored. In practice, data sets from two sellers may have similar or overlapping parts. A data buyer with a limited budget may not want to purchase many similar data points, as the diversity of training data sets is critical to the performance of machine learning models [30] . Query-based pricing models [53] allow data buyers to only purchase their interested parts of a data set. However, the existing query-based pricing models are only designed for relational data sets in monopoly markets. Supporting query-based pricing in marketplaces of general data sets with competing sellers brings new challenges and opportunities. For example, it is interesting for data buyers to explore how to distribute their budgets among data sellers to maximize the utility of purchased data sets. For data sellers, it is important to assign prices to different parts of their data sets based on supply and demand, such that the data sellers and their data sets can remain competitive in the market. Last, rigorous evaluation methods for data pricing models need to be developed. Many existing pricing models are only evaluated in oversimplified experimental environments, where many assumptions are made on the behaviors of market participants. A theoretically sound model, however, may not work in practice, as some model assumptions may break. For example, in a real-world market, participants can have adversarial, ignorant, or coalition-building behaviors. However, the effects of those behaviors on the performance of pricing models are largely dismissed in detailed analysis. Therefore, as suggested by Fernandez et al. [30] , a simulation platform that can simulate different behaviors of market participants should be developed. The platform can help us study the advantages and limitations of pricing models in target environments, and choose the best one to deploy. Buy-side marketplace. Fig. 2 : 2 Fig. 2: Architectures of data marketplace. i ) = U(D), si∈S π(s i ) + ≥ U(S) ∀S ⊆ D."
}