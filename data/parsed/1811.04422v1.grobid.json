{
  "title": "An Optimal Control View of Adversarial Machine Learning",
  "abstract": "I describe an optimal control view of adversarial machine learning, where the dynamical system is the machine learner, the input are adversarial actions, and the control costs are defined by the adversary's goals to do harm and be hard to detect. This view encompasses many types of adversarial machine learning, including test-item attacks, training-data poisoning, and adversarial reward shaping. The view encourages adversarial machine learning researcher to utilize advances in control theory and reinforcement learning.",
  "introduction": "1 Adversarial Machine Learning is not Machine Learning Machine learning has its mathematical foundation in concentration inequalities. This is a consequence of the independent and identically-distributed (i.i.d.) data assumption. In contrast, I suggest that adversarial machine learning may adopt optimal control as its mathematical foundation [3, 25] . There are telltale signs: adversarial attacks tend to be subtle and have peculiar non-i.i.d. structures -as control input might be.",
  "body": "1 Adversarial Machine Learning is not Machine Learning Machine learning has its mathematical foundation in concentration inequalities. This is a consequence of the independent and identically-distributed (i.i.d.) data assumption. In contrast, I suggest that adversarial machine learning may adopt optimal control as its mathematical foundation [3, 25] . There are telltale signs: adversarial attacks tend to be subtle and have peculiar non-i.i.d. structures -as control input might be. Optimal Control I will focus on deterministic discrete-time optimal control because it matches many existing adversarial attacks. Extensions to stochastic and continuous control are relevant to adversarial machine learning, too. The system to be controlled is called the plant, which is defined by the system dynamics: x t+1 = f (x t , u t ) (1) where x t ∈ X t is the state of the system, u t ∈ U t is the control input, and U t is the control constraint set. The function f defines the evolution of state under external control. The time index t ranges from 0 to T -1, and the time horizon T can be finite or infinite. The quality of control is specified by the running cost: g t (x t , u t ) (2) which defines the step-by-step control cost, and the terminal cost for finite horizon: g T (x T ) (3) which defines the quality of the final state. The optimal control problem is to find control inputs u 0 . . . u T -1 in order to minimize the objective: min u0...uT -1 g T (x T ) + T -1 t=0 g t (x t , u t ) (4) s.t. x t+1 = f (x t , u t ), u t ∈ U t , ∀t x 0 given More generally, the controller aims to find control policies φ t (x t ) = u t , namely functions that map observed states to inputs. In optimal control the dynamics f is known to the controller. There are two styles of solutions: dynamic programming and Pontryagin minimum principle [2, 10, 17] . When f is not fully known, the problem becomes either robust control where control is carried out in a minimax fashion to accommodate the worst case dynamics [28] , or reinforcement learning where the controller probes the dynamics [23] . Adversarial Machine Learning as Control Now let us translate adversarial machine learning into a control formulation. Adversarial machine learning studies vulnerability throughout the learning pipeline [4, 13, 20, 26] . As examples, I present training-data poisoning, test-time attacks, and adversarial reward shaping below. In all cases, the adversary attempts to control the machine learning system, and the control costs reflect the adversary's desire to do harm and be hard to detect. Unfortunately, the notations from the control community and the machine learning community clash. For example, x denotes the state in control but the feature vector in machine learning. I will use the machine learning convention below. Training-Data Poisoning In training-data poisoning the adversary can modify the training data. The machine learner then trains a \"wrong\" model from the poisoned data. The adversary's goal is for the \"wrong\" model to be useful for some nefarious purpose. I use supervised learning for illustration. Batch Learner At this point, it becomes useful to distinguish batch learning and sequential (online) learning. If the machine learner performs batch learning, then the adversary has a degenerate one-step control problem. One-step control has not been the focus of the control community and there may not be ample algorithmic solutions to borrow from. Still, it is illustrative to pose batch training set poisoning as a control problem. I use Support Vector Machine (SVM) with a batch training set as an example below: • The state is the learner's model h : X → Y. For instance, for SVM h is the classifier parametrized by a weight vector w. I will use h and w interchangeably. • The control u 0 is a whole training set, for instance u 0 = {(x i , y i )} 1:n . • The control constraint set U 0 consists of training sets available to the adversary; if the adversary can arbitrary modify a training set for supervised learning (including changing features and labels, inserting and deleting items), this could be U 0 = ∪ ∞ n=0 (X × Y) n , namely all training sets of all sizes. This is a large control space. • The system dynamics (1) is defined by the learner's learning algorithm. For the SVM learner, this would be empirical risk minimization with hinge loss ℓ() and a regularizer: w 1 = f (u 0 ) ∈ argmin w n i=1 ℓ(w, x i , y i ) + λ w 2 . ( 5 ) The batch SVM does not need an initial weight w 0 . The adversary has full knowledge of the dynamics f () if it knows the form (5), ℓ(), and the value of λ. • The time horizon T = 1. • The adversary's running cost g 0 (u 0 ) measures the poisoning effort in preparing the training set u 0 . This is typically defined with respect to a given \"clean\" data set ũ before poisoning in the form of g 0 (u 0 ) = distance(u 0 , ũ). (6) The running cost is domain dependent. For example, the distance function may count the number of modified training items; or sum up the Euclidean distance of changes in feature vectors. • The adversary's terminal cost g 1 (w 1 ) measures the lack of intended harm. The terminal cost is also domain dependent. For example: -If the adversary must force the learner into exactly arriving at some target model w * , then g 1 (w 1 ) = I ∞ [w 1 = w * ]. Here I y [z] = y if z is true and 0 otherwise, which acts as a hard constraint. -If the adversary only needs the learner to get near w * then g 1 (w 1 ) = w 1w * for some norm. -If the adversary wants to ensure that a specific future item x * is classified ǫ-confidently as positive, it can use g 1 (w 1 ) = I ∞ [w 1 / ∈ W * ] with the target set W * = {w : w ⊤ x * ≥ ǫ}. More generally, W * can be a polytope defined by multiple future classification constraints. With these definitions, the adversary's one-step control problem (4) specializes to min u0 g 1 (w 1 ) + g 0 (w 0 , u 0 ) (7) s.t. w 1 = f (w 0 , u 0 ) Unsurprisingly, the adversary's one-step control problem is equivalent to a Stackelberg game and bi-level optimization (the lower level optimization is hidden in f ), a well-known formulation for training-data poisoning [12, 21] . Sequential Learner The adversary performs classic discrete-time control if the learner is sequential: • The learner starts from an initial model w 0 , which is the initial state. • The control input at time t is u t = (x t , y t ), namely the t th training item for t = 0, 1, . . . • The dynamics is the sequential update algorithm of the learner. For example, the learner may perform one step of gradient descent: w t+1 = f (w t , u t ) = w t -η t ∇ℓ(w t , x t , y t ). (8) • The adversary's running cost g t (w t , u t ) typically measures the effort of preparing u t . For example, it could measure the magnitude of change u t -ũt with respect to a \"clean\" reference training sequence ũ. Or it could be the constant 1 which reflects the desire to have a short control sequence. • The adversary's terminal cost g T (w T ) is the same as in the batch case. The problem (4) then produces the optimal training sequence poisoning. Earlier attempts on sequential teaching can be found in [1, 18, 19] . Test-Time Attack Test-time attack differs from training-data poisoning in that a machine learning model h : X → Y is alreadytrained and given. Also given is a \"test item\" x. There are several variants of test-time attacks, I use the following one for illustration: The adversary seeks to minimally perturb x into x ′ such that the machine learning model classifies x and x ′ differently. That is, min x ′ distance(x, x ′ ) (9) s.t. h(x) = h(y). The distance function is domain-dependent, though in practice the adversary often uses a mathematically convenient surrogate such as some p-norm xx ′ p . One way to formulate test-time attack as optimal control is to treat the test-item itself as the state, and the adversarial actions as control input. Let us first look at the popular example of test-time attack against image classification: • Let the initial state x 0 = x be the clean image. • The adversary's control input u 0 is the vector of pixel value changes. • The control constraint set is U 0 = {u : x 0 + u ∈ [0, 1] d } to ensure that the modified image has valid pixel values (assumed to be normalized in [0, 1]). • The dynamical system is trivially vector addition: x 1 = f (x 0 , u 0 ) = x 0 + u 0 . • The adversary's running cost is g 0 (x 0 , u 0 ) = distance(x 0 , x 1 ). • The adversary's terminal cost is g 1 (x 1 ) = I ∞ [h(x 1 ) = h(x 0 )]. Note the machine learning model h is only used to define the hard constraint terminal cost; h itself is not modified. With these definitions this is a one-step control problem (4) that is equivalent to the test-time attack problem (9) . This control view on test-time attack is more interesting when the adversary's actions are sequential U 0 , U 1 , . . ., and the system dynamics render the action sequence non-commutative. The adversary's running cost g t then measures the effort in performing the action at step t. One limitation of the optimal control view is that the action cost is assumed to be additive over the steps. Defense Against Test-Time Attack by Adversarial Training Some defense strategies can be viewed as optimal control, too. One defense against test-time attack is to require the learned model h to have the large-margin property with respect to a training set. Let (x, y) be any training item, and ǫ a margin parameter. Then the large-margin property states that the decision boundary induced by h should not pass ǫ-close to (x, y): ∀x ′ : ( x ′ -x p ≤ ǫ) ⇒ h(x ′ ) = y. ( 10 ) This is an uncountable number of constraints. It is relatively easy to enforce for linear learners such as SVMs, but impractical otherwise. Adversarial training can be viewed as a heuristic to approximate the uncountable constraint (10) with a finite number of active constraints: one performs test-time attack against the current h from x to find an adversarial item x (1) , such that x (1)x p ≤ ǫ but h(x (1) ) = y. Instead of adding a single constraint h(x (1) ) = y, an additional training item (x (1) , y) then added to the training set. The machine learning algorithm learns a different h, with the hope (but not constraining) that h(x (1) ) = y. This process repeats for k iteration, resulting in k additional training items (x (i) , y) for i = 1 . . . k. It should be clear that such defense is similar to training-data poisoning, in that the defender uses data to modify the learned model. This is especially interesting when the learner performs sequential updates. One way to formulate adversarial training defense as control is the following: • The state is the model h t . Initially h 0 can be the model trained on the original training data. • The control input u t = (x t , y t ) is an additional training item with the trivial constraint set U t = X×y. • The dynamics h t+1 = f (h t , u t ) is one-step update of the model, e.g. by back-propagation. • The defender's running cost g t (h t , u t ) can simply be 1 to reflect the desire for less effort (the running cost sums up to k). • The defender's terminal cost g T (h T ) penalizes small margin of the final model h T with respect to the original training data. Of course, the resulting control problem (4) does not directly utilize adversarial examples. One way to incorporate them is to restrict U t to a set of adversarial examples found by invoking test-time attackers on h t , similar to the heuristic in [7] . These adversarial examples do not even need to be successful attacks. Adversarial Reward Shaping When adversarial attacks are applied to sequential decision makers such as multi-armed bandits or reinforcement learning agents, a typical attack goal is to force the latter to learn a wrong policy useful to the adversary. The adversary may do so by manipulating the rewards and the states experienced by the learner [11, 14] . To simplify the exposition, I focus on adversarial reward shaping against stochastic multi-armed bandit, because this does not involve deception through perceived states. To review, in stochastic multi-armed bandit the learner at iteration t chooses one of k arms, denoted by I t ∈ [k], to pull according to some strategy [6] . For example, the (α, ψ)-Upper Confidence Bound (UCB) strategy chooses the arm I t ∈ argmax i∈[k] μi,Ti(t-1) + ψ * -1 α log t T i (t -1) (11) where T i (t -1) is the number of times arm i has been pulled up to time t -1, μi,Ti(t-1) is the empirical mean of arm i so far, and ψ * is the dual of a convex function ψ. The environment generates a stochastic reward r It ∼ ν It . The learner updates its estimate of the pulled arm: μIt,TI t (t) = μIt,TI t (t-1) T It (t -1) + r It T It (t -1) + 1 (12) which in turn affects which arm it will pull in the next iteration. The learner's goal is to minimize the pseudo-regret T µ max -E T t=1 µ It where µ i = Eν i and µ max = max i∈[k] µ i . Stochastic multi-armed bandit strategies offer upper bounds on the pseudo-regret. With adversarial reward shaping, an adversary fully observes the bandit. The adversary intercepts the environmental reward r It in each iteration, and may choose to modify (\"shape\") the reward into r It + u t with some u t ∈ R before sending the modified reward to the learner. The adversary's goal is to use minimal reward shaping to force the learner into performing specific wrong actions. For example, the adversary may want the learner to frequently pull a particular target arm i * ∈ [k]. It should be noted that the adversary's goal may not be the exact opposite of the learner's goal: the target arm i * is not necessarily the one with the worst mean reward, and the adversary may not seek pseudo-regret maximization. Adversarial reward shaping can be formulated as stochastic optimal control: • The state s t , now called control state to avoid confusion with the Markov Decision Process states experienced by an reinforcement learning agent, consists of the sufficient statistic tuple at time t: s t = (T 1 (t -1), μ1,T1(t-1) , . . . , T k (t -1), μk,T k (t-1) , I t ). • The control input is u t ∈ U t with U t = R in the unconstrained shaping case, or the appropriate U t if the rewards must be binary, for example. • The dynamics s t+1 = f (s t , u t ) is straightforward via empirical mean update (12), T It increment, and new arm choice (11) . • The adversary's running cost g t (s t , u t ) reflects shaping effort and target arm achievement in iteration t. For instance, g t (s t , u t ) = u 2 t + I λ [I t = i * ]. (13) where λ > 0 is a trade off parameter. • There is not necessarily a time horizon T or a terminal cost g T (s T ). The control state is stochastic due to the stochastic reward r It entering through (12) . Advantages of the Optimal Control View There are a number of potential benefits in taking the optimal control view: • It offers a unified conceptual framework for adversarial machine learning; • The optimal control literature provides efficient solutions when the dynamics f is known and one can take the continuous limit to solve the differential equations [15] ; • Reinforcement learning, either model-based with coarse system identification or model-free policy iteration, allows approximate optimal control when f is unknown, as long as the adversary can probe the dynamics [8, 9] ; • A generic defense strategy may be to limit the controllability the adversary has over the learner. • I mention in passing that the optimal control view applies equally to machine teaching [27, 29] , and thus extends to the application of personalized education [22, 24] . I need to point out some limitations: • Having a unified optimal control view does not automatically produce efficient solutions to the control problem (4). For adversarial machine learning applications the dynamics f is usually highly nonlinear and complex. Furthermore, in graybox and blackbox attack settings f is not fully known to the attacker. They affect the complexity in finding an optimal control. • The adversarial learning setting is largely non-game theoretic, though there are exceptions [5, 16] . These problems call for future research from both machine learning and control communities."
}