{
  "title": "DriveML: An R Package for Driverless Machine Learning",
  "abstract": "In recent years, the concept of automated machine learning has become very popular. Automated Machine Learning (AutoML) mainly refers to the automated methods for model selection and hyper-parameter optimization of various algorithms such as random forests, gradient boosting, neural networks, etc. In this paper, we introduce a new package i.e. DriveML for automated machine learning. DriveML helps in implementing some of the pillars of an automated machine learning pipeline such as automated data preparation, feature engineering, model building and model explanation by running the function instead of writing lengthy R codes. The DriveML package is available in CRAN. We compare the DriveML package with other relevant packages in CRAN/Github by applying them on multiple datasets of different dimensions. We find that DriveML performs the best taking into consideration both the prediction accuracy and the execution time. We also provide an illustration by applying the DriveML package with default configuration on a real world dataset. Overall, the main benefits of DriveML are in development time savings, reduce developer's errors, optimal tuning of machine learning models and reproducibility. CCS Concepts: • Computing methodologies → Supervised learning by classification.",
  "introduction": "Introduction Machine learning has disrupted almost every industry around us such as social media, transportation, agriculture, retail, software development, marketing, sales, finance, manufacturing and more. Machine learning (ML) is the phenomenon by which computers learn things by themselves and recognize * Corresponding author different patterns [3, 13] . Thomas M. Mitchell defined the machine learning problem as, \"A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E\" [12] . In recent years, the concept of automated machine learning has gained traction. Many of the top tech companies such as Google, Amazon, Facebook, H2O and more (including some tech startups) are focusing on this. Automated Machine Learning (AutoML) mainly refers to the automated methods for model selection and hyper-parameter optimization of various algorithms such as random forests, gradient boosting, neural networks and more [18] . The four pillars of building an automated machine learning pipeline are: (a) Data Preparation, (b) Feature Engineering, (c) Model development and (d) Model evaluation. Any AutoML pipeline would focus on automating these four pillars [7] . Please see Elshawi et al. [5] for a detailed overview of some of the recent works reported in the literature for automated machine learning. In this paper, we introduce the DriveML package for automated machine learning especially in the classification context. DriveML saves a lot of effort required for data preparation, feature engineering, model selection and writing lengthy codes in a programming environment such as R [15] . Thus, the DriveML package saves time and leads to more efficiency. In the following sections, we discuss the key functionality of the package, provide an illustration by applying the DriveML package with default configuration on a real world dataset, and compare DriveML with other relevant R packages across multiple datasets.  DriveML can call the SmartEDA [14] package for performing automated exploratory data analysis (EDA). The \"autoMLmodel\" function in DriveML performs the various tasks for automated machine learning such as creating model test and train datasets and then run multiple classification models such as (i) glmnet-Regularised regression from glmnet R package [6] , (ii) logreg-logistic regression from stats R package [15] , (iii) randomForest-Random forests using the randomForest R [10] , (iv) ranger-Random forests using the ranger R package [19] , (v) xgboost-Extreme Gradient boosting using xgboost R package [2] and (vi) rpart-decision tree classification using rpart R package [16] .",
  "body": "Introduction Machine learning has disrupted almost every industry around us such as social media, transportation, agriculture, retail, software development, marketing, sales, finance, manufacturing and more. Machine learning (ML) is the phenomenon by which computers learn things by themselves and recognize * Corresponding author different patterns [3, 13] . Thomas M. Mitchell defined the machine learning problem as, \"A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E\" [12] . In recent years, the concept of automated machine learning has gained traction. Many of the top tech companies such as Google, Amazon, Facebook, H2O and more (including some tech startups) are focusing on this. Automated Machine Learning (AutoML) mainly refers to the automated methods for model selection and hyper-parameter optimization of various algorithms such as random forests, gradient boosting, neural networks and more [18] . The four pillars of building an automated machine learning pipeline are: (a) Data Preparation, (b) Feature Engineering, (c) Model development and (d) Model evaluation. Any AutoML pipeline would focus on automating these four pillars [7] . Please see Elshawi et al. [5] for a detailed overview of some of the recent works reported in the literature for automated machine learning. In this paper, we introduce the DriveML package for automated machine learning especially in the classification context. DriveML saves a lot of effort required for data preparation, feature engineering, model selection and writing lengthy codes in a programming environment such as R [15] . Thus, the DriveML package saves time and leads to more efficiency. In the following sections, we discuss the key functionality of the package, provide an illustration by applying the DriveML package with default configuration on a real world dataset, and compare DriveML with other relevant R packages across multiple datasets.  DriveML can call the SmartEDA [14] package for performing automated exploratory data analysis (EDA). The \"autoMLmodel\" function in DriveML performs the various tasks for automated machine learning such as creating model test and train datasets and then run multiple classification models such as (i) glmnet-Regularised regression from glmnet R package [6] , (ii) logreg-logistic regression from stats R package [15] , (iii) randomForest-Random forests using the randomForest R [10] , (iv) ranger-Random forests using the ranger R package [19] , (v) xgboost-Extreme Gradient boosting using xgboost R package [2] and (vi) rpart-decision tree classification using rpart R package [16] . Key Functionality The other features of the autoMLmodel function are (a) Hyper-parameter Tuning-using Random search (default option) or by applying the irace (Iterated Racing for Automatic Algorithm Configuration) package [11] , (b) performs model validation using Receiver Operating Characteristics Area Under the Curve (ROC AUC), (c) Model scoring and (d) Variable importance chart for the best model (i.e. the one having the highest ROC AUC in the validation dataset). The autoMLmodel function will also output the lift chart for the best model and will also provide the Partial dependency plot (PDP plots) for the top five variables from the best model. If the user wants to get the PDP plots for some specific variables, then they can user the function \"autoPDP\" for the same. The \"autoMAR\" function is used to identify and generate the Missing at Random features (MAR). The following steps explain the way it works. (1) For every feature X1 in a dataset with missing values, we create a new variable Y1, which will have value of 1 if X1 has a missing value or 0 otherwise, (2) We then fit a classification model with Y1 as dependent variable and all other features other than X1 as independent variables, (3) If the AUC is high, it means that there is a pattern to the missing values( i.e. they are not missing at random), in this case we retain Y1 as an additional independent variable in the original dataset, (4) If the AUC is low, then the missing values in X1 are missing at random, then Y1 is dropped, (5) Repeat steps 1 to 4 for all the independent variables in the original dataset and ( 6 ) Publish a report with the findings for each independent variable X and additional variables added to the dataset. Finally, DriveML will provide an HTML slide/vignette report containing the data descriptive statistics, model results, AUC plots, lift charts and PDP plots. Illustration In this section, we provide an illustration by applying the DriveML package with default configuration on a real world dataset. The goal is to make an user of the DriveML package familiar with the various functions (please see Section 2) of the package in R. We use the Heart disease dataset that is publicly available in the UCI machine learning repository [4] . The dataset has 303 observations and 14 variables. The target variable is a binary categorical variable that indicates whether a patient has heart disease or not. The independent variables are age, gender, presence of chest pain, cholesterol, resting blood pressure, maximum heart rate and more. We apply the DriveML package and it splits the dataset into 243 observations in train and 60 observations in test datasets. The results for the various methods are shown below in Table 1 . We find that the ranger method gives the best result in terms of the Test AUC. We consider the Test AUC as the default evaluation metric in this package. However, the user is free to choose any other evaluation metrics such as (F1 score, Precision, Recall and Accuracy) as well. We also record the model fitting time and the scoring time as shown in Table 1 . Figure 2 shows the test AUC plot. The modus-operandi of applying DriveML in R is described in the code snippet below. We first load the dataset and perform data preparation using the \"autoDataprep\" function. Now, we will perform automated training, tuning, and validation of the different machine learning models using the \"autoMLmodel\" function. This function includes six binary classification techniques that were mentioned earlier. We then generate the model summary results as shown in Table 1 and plot the Test ROC AUC plot. Finally, we can use the \"autoMLReport\" function to generate a report in the html format for the output of \"autoDataprep\" and \"autoMLmodel\" DriveML functions. > autoMLReport(mlobject = mymodel, mldata = heart, op_file = \"driveML_ouput_heart_data.html\") Figures 3 and 4 show the lift chart for all the methods (along with the lift tables) and the partial dependency plots (PDP) for some of the independent variables respectively. Moreover, we applied the DriveML package on much larger datasets and we got some encouraging results taking into account both the prediction accuracy and the time taken (we will discuss these in more details in Section 4). However, the Comparison of DriveML with other relevant R Packages In this section, we compare the DriveML package with other similar packages available in CRAN/Github for automated machine learning namely, OneR [8] , H2O [9] , and AutoXG-Boost [17] . We will apply these packages on four different datasets of different dimensions in the context of binary classification. The metrics for evaluation would be prediction accuracy (i.e. the Test AUC in this case) and the total execution time in seconds (this includes features engineering and model training). However, please note that there are some limitations that some of these competing packages have when compared to that of DriveML. For example, the AutoXGBoost function only used the Extreme Gradient Boosting (XGBoost) method for automated machine learning. Also, both OneR and Au-toXGBoost don't possess the capability for automated feature engineering, missing value treatment, and more. So, to ensure an apples to apples comparison, we will only use Boosting algorithms for both DriveML and H2O autoML functions. And we will also include the dataset preparation time in the total execution time metric for both OneR and AutoXGBoost in the experiments conducted by us. We use datasets of different dimensions/sizes and categorize them into four different categories such as Extra large, Large, Medium, and Small. The extra large one is the rain in Australia dataset (source: https://www.kaggle.com/jsphyg/  weather-dataset-rattle-package ). This dataset contains about 10 years of daily weather observations from many locations across Australia. It contains the target variable \"RainTomorrow\", which signifies whether it will rain tomorrow or not. The total number of observations in the training dataset are 116, 368. We will refer to this dataset as \"Weather Australia\" for the rest of this paper. Moreover, this dataset also contains missing values. The next dataset is the \"Adult data\" and we classify this into the Large dataset size category. This is a census data and is publicly available in the UCI machine learning repository [4] . The binary target variable indicates if an individual's income exceeds 50, 000 USD per year. The dataset that we consider in the medium size category is the \"HR Analytics\" dataset that is available in Kaggle (source: https://www.kaggle.com/  arashnic/hr-analytics-job-change-of-data-scientists ). This dataset is designed by HR researchers to understand the factors that lead a person to leave a current job. And finally, we use the Heart disease dataset that is classified as a small dataset size category. It is publicly available in the UCI machine learning repository [4] . All the information regarding number of attributes, if there are missing values, number of training and test dataset observations for each of these four datasets are provided in Table 2 . Table 2 describes the results of the experiments conducted by us to compare the performance of DriveML against other R packages across different datasets as mentioned earlier. All the experiments were conducted on a machine with configuration: 32 GB RAM, 64-bit Windows OS, intel i7 processor, and CPU @ 2.60GHz. In Table 2 , we can see that for a small dataset i.e. the Heart disease dataset, the DriveML is claerly the best performer taking into account both test AUC and the time taken. However, for the other datasets, the test AUC scores for both DriveML and H2O autoML are very close. But DriveML is much faster than H2o autoML. Thus, we find that DriveML is the best performer taking into consideration both prediction accuracy and total execution time taken. Conclusion The contribution of this paper is in the development of a new package in R i.e., DriveML for automated machine learning. DriveML helps in implementing some of the pillars of an automated machine learning pipeline such as automated data preparation, feature engineering, model building (techniques such as Random forest, XGBoost, logistic regression and more) and model explanation (using lift chart and PDP plots) by running the function instead of writing lengthy R codes. DriveML also provides some additional features such as model ensembling, lift charts and automated exploratory data analysis when compared to other R packages. Moreover, DriveML also exports the model results with the required plots in an HTML vignette report format that follows the best practices of the industry and the academia. Overall, the main benefits of the DriveML package are in development time savings, reduce developer's errors, optimal tuning of machine learning models and reproducibility. Figure 1 1 Figure1shows the various functionalities of the DriveML package. DriveML has a single function i.e. \"autoDataprep\" that performs automatic data preparation steps on the raw Figure 1 . 1 Figure 1. The various functionalities of DriveML. > library(\"DriveML\") > library(\"SmartEDA\") ## Load the dataset > heart = DriveML::heart #Now, let us perform data preparation using DriveML. > dateprep <-autoDataprep(data = heart, target = 'target_var', # > mymodel <-autoMLmodel( train = heart, test = NULL, target = 'target_var', testSplit = Plot the Test ROC AUC > TestROC <mymodel$trainedModels$randomForest$modelPlots$TestROC > TestROC Figure 2 . 2 Figure 2. Test AUC plot for the ranger method. Figure 3 . 3 Figure 3. Lift chart and lift table for all the six methods. Figure 4 . 4 Figure 4. Partial Dependency plots (PDP) for variables-age, thalach, chol and exang. Table 1 . 1 Performance comparison of different techniques on the Heart disease dataset Model Fitting time (secs) Scoring time (secs) Train AUC Test AUC Accuracy Precision Recall F1_score ranger 3.148 0.017 0.997 0.953 0.867 0.816 0.969 0.886 glmnet 3.377 0.009 0.915 0.941 0.867 0.833 0.938 0.882 logreg 4.384 0.005 0.915 0.940 0.867 0.833 0.938 0.882 randomForest 3.155 0.011 0.997 0.937 0.850 0.811 0.938 0.870 xgboost 3.56 0.005 0.996 0.930 0.867 0.816 0.969 0.886 rpart 2.799 0.005 0.908 0.859 0.833 0.806 0.906 0.853 html format reports for each of these experiments that demon- strates the output of the DriveML functions are available in the \"Articles\" section of the Github webpage of the DriveML package: https://daya6489.github.io/DriveML/. Table 2 . 2 Comparison of DriveML with other available R packages Sl no. Dataset name Dataset size category R package No. of Attributes Missing values? No. of Train instances No. of Test instances Total Execution time (in secs) Test AUC 1 DriveML 263.29 0.89 2 3 Weather Australia Extra Large H2O automl OneR 23 yes 116368 29092 1176.91 1.19 0.89 0.77 4 autoxgboost 139.16 0.88 5 DriveML 29.90 0.92 6 7 Adult data Large H2O automl OneR 14 No 32561 16281 47.84 0.13 0.92 0.71 8 autoxgboost 40.70 0.92 9 DriveML 35.13 0.79 10 11 HR Analytics Medium H2O automl OneR 14 yes 15327 3831 60.87 0.11 0.80 0.71 12 autoxgboost 13.55 0.64 13 DriveML 6.07 0.91 14 15 Heart Disease Small H2O automl OneR 14 No 243 60 32.07 0.05 0.90 0.68 16 autoxgboost 10.29 0.90"
}